{"version":3,"sources":["../bower_components/ng-dialog/js/ngDialog.js"],"names":["root","factory","module","exports","angular","require","define","amd","this","m","$el","element","isDef","isDefined","style","document","body","documentElement","animationEndSupport","animation","WebkitAnimation","MozAnimation","MsAnimation","OAnimation","animationEndEvent","forceElementsReload","html","scopes","openIdStack","keydownIsBound","openOnePerName","provider","defaults","className","appendClassName","disableAnimation","plain","showClose","closeByDocument","closeByEscape","closeByNavigation","appendTo","preCloseCallback","onOpenCallback","overlay","cache","trapFocus","preserveFocus","ariaAuto","ariaRole","ariaLabelledById","ariaLabelledBySelector","ariaDescribedById","ariaDescribedBySelector","bodyClassName","width","height","setForceHtmlReload","_useIt","setForceBodyReload","setDefaults","newDefaults","extend","setOpenOnePerName","isOpenOne","closeByDocumentHandler","globalID","dialogsCount","defers","$get","$document","$templateCache","$compile","$q","$http","$rootScope","$timeout","$window","$controller","$injector","$elements","privateMethods","onDocumentKeydown","event","keyCode","publicMethods","close","activate","$dialog","data","on","onTrapFocusKeydown","deactivate","off","deactivateAll","els","forEach","el","setBodyPadding","originalBodyPadding","parseInt","css","$broadcast","resetBodyPadding","performCloseDialog","value","options","id","attr","scope","Hammer","hammerTime","destroy","unbind","hasClass","previousFocus","focus","$destroy","bind","closeDialogElement","addClass","resolve","remainingDialogs","splice","indexOf","length","undefined","remove","removeClass","closeDialog","isFunction","preCloseCallbackResult","call","isObject","closePromise","then","ev","currentTarget","getActiveDialog","isTab","backward","shiftKey","handleTab","focusableElements","getFocusableElements","currentFocus","activeElement","focusIndex","Array","prototype","isFocusIndexUnknown","isFirstElementFocused","isLastElementFocused","cancelEvent","preventDefault","stopPropagation","blur","autoFocus","dialogEl","autoFocusEl","querySelector","contentElements","filterVisibleElements","querySelectorAll","contentElement","rawElements","tabbableElements","filterTabbableElements","tabbableFocusableElements","i","push","visibleFocusableElements","offsetWidth","offsetHeight","dialogs","applyAriaAttributes","detectedRole","applyAriaAttribute","selector","dialogId","firstMatch","generatedId","detectUIRouter","err","getRouterLocationEventName","__PRIVATE__","open","opts","loadTemplateUrl","tmpl","config","headers","Accept","get","res","dialogID","name","toLowerCase","replace","isOpen","copy","localID","merge","defer","$new","$dialogParent","$dialogContent","key","isString","invoke","all","template","loadTemplate","templateUrl","locals","setup","hasOverlayClass","ngDialogId","firstLetter","ngDialogData","fromJson","String","option","callback","$parent","closeThisDialog","controller","isArray","label","controllerAs","controllerInstance","$scope","$element","bindToController","instance","confirm","$activeDialogs","widthDiffs","innerWidth","prop","scrollBarWidth","append","dialog","eventName","$on","$event","isOverlay","target","isCloseBtn","promise","openConfirm","getElementById","openResult","reject","topDialogId","closeAll","$all","getOpenDialogs","getDefaults","elementName","find","directive","ngDialog","restrict","ngDialogScope","link","elem","attrs","e","ngDialogClosePrevious","ngDialogClass","ngDialogAppendClass","ngDialogController","ngDialogControllerAs","ngDialogBindToController","ngDialogDisableAnimation","ngDialogShowClose","ngDialogCloseByDocument","ngDialogCloseByEscape","ngDialogOverlay","ngDialogPreCloseCallback","ngDialogOnOpenCallback","ngDialogBodyClass"],"mappings":"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","file":"ng-dialog.js","sourcesContent":["/*\n * ngDialog - easy modals and popup windows\n * http://github.com/likeastore/ngDialog\n * (c) 2013-2015 MIT License, https://likeastore.com\n */\n\n(function (root, factory) {\n    if (typeof module !== 'undefined' && module.exports) {\n        // CommonJS\n        if (typeof angular === 'undefined') {\n            factory(require('angular'));\n        } else {\n            factory(angular);\n        }\n        module.exports = 'ngDialog';\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['angular'], factory);\n    } else {\n        // Global Variables\n        factory(root.angular);\n    }\n}(this, function (angular) {\n    'use strict';\n\n    var m = angular.module('ngDialog', []);\n\n    var $el = angular.element;\n    var isDef = angular.isDefined;\n    var style = (document.body || document.documentElement).style;\n    var animationEndSupport = isDef(style.animation) || isDef(style.WebkitAnimation) || isDef(style.MozAnimation) || isDef(style.MsAnimation) || isDef(style.OAnimation);\n    var animationEndEvent = 'animationend webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend';\n    var focusableElementSelector = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]';\n    var disabledAnimationClass = 'ngdialog-disabled-animation';\n    var forceElementsReload = { html: false, body: false };\n    var scopes = {};\n    var openIdStack = [];\n    var keydownIsBound = false;\n    var openOnePerName = false;\n\n\n    m.provider('ngDialog', function () {\n        var defaults = this.defaults = {\n            className: 'ngdialog-theme-default',\n            appendClassName: '',\n            disableAnimation: false,\n            plain: false,\n            showClose: true,\n            closeByDocument: true,\n            closeByEscape: true,\n            closeByNavigation: false,\n            appendTo: false,\n            preCloseCallback: false,\n            onOpenCallback: false,\n            overlay: true,\n            cache: true,\n            trapFocus: true,\n            preserveFocus: true,\n            ariaAuto: true,\n            ariaRole: null,\n            ariaLabelledById: null,\n            ariaLabelledBySelector: null,\n            ariaDescribedById: null,\n            ariaDescribedBySelector: null,\n            bodyClassName: 'ngdialog-open',\n            width: null,\n            height: null\n        };\n\n        this.setForceHtmlReload = function (_useIt) {\n            forceElementsReload.html = _useIt || false;\n        };\n\n        this.setForceBodyReload = function (_useIt) {\n            forceElementsReload.body = _useIt || false;\n        };\n\n        this.setDefaults = function (newDefaults) {\n            angular.extend(defaults, newDefaults);\n        };\n\n        this.setOpenOnePerName = function (isOpenOne) {\n            openOnePerName = isOpenOne || false;\n        };\n\n        var globalID = 0, dialogsCount = 0, closeByDocumentHandler, defers = {};\n\n        this.$get = ['$document', '$templateCache', '$compile', '$q', '$http', '$rootScope', '$timeout', '$window', '$controller', '$injector',\n            function ($document, $templateCache, $compile, $q, $http, $rootScope, $timeout, $window, $controller, $injector) {\n                var $elements = [];\n\n                var privateMethods = {\n                    onDocumentKeydown: function (event) {\n                        if (event.keyCode === 27) {\n                            publicMethods.close('$escape');\n                        }\n                    },\n\n                    activate: function($dialog) {\n                        var options = $dialog.data('$ngDialogOptions');\n\n                        if (options.trapFocus) {\n                            $dialog.on('keydown', privateMethods.onTrapFocusKeydown);\n\n                            // Catch rogue changes (eg. after unfocusing everything by clicking a non-focusable element)\n                            $elements.body.on('keydown', privateMethods.onTrapFocusKeydown);\n                        }\n                    },\n\n                    deactivate: function ($dialog) {\n                        $dialog.off('keydown', privateMethods.onTrapFocusKeydown);\n                        $elements.body.off('keydown', privateMethods.onTrapFocusKeydown);\n                    },\n\n                    deactivateAll: function (els) {\n                        angular.forEach(els,function(el) {\n                            var $dialog = angular.element(el);\n                            privateMethods.deactivate($dialog);\n                        });\n                    },\n\n                    setBodyPadding: function (width) {\n                        var originalBodyPadding = parseInt(($elements.body.css('padding-right') || 0), 10);\n                        $elements.body.css('padding-right', (originalBodyPadding + width) + 'px');\n                        $elements.body.data('ng-dialog-original-padding', originalBodyPadding);\n                        $rootScope.$broadcast('ngDialog.setPadding', width);\n                    },\n\n                    resetBodyPadding: function () {\n                        var originalBodyPadding = $elements.body.data('ng-dialog-original-padding');\n                        if (originalBodyPadding) {\n                            $elements.body.css('padding-right', originalBodyPadding + 'px');\n                        } else {\n                            $elements.body.css('padding-right', '');\n                        }\n                        $rootScope.$broadcast('ngDialog.setPadding', 0);\n                    },\n\n                    performCloseDialog: function ($dialog, value) {\n                        var options = $dialog.data('$ngDialogOptions');\n                        var id = $dialog.attr('id');\n                        var scope = scopes[id];\n                        privateMethods.deactivate($dialog);\n\n                        if (!scope) {\n                            // Already closed\n                            return;\n                        }\n\n                        if (typeof $window.Hammer !== 'undefined') {\n                            var hammerTime = scope.hammerTime;\n                            hammerTime.off('tap', closeByDocumentHandler);\n                            hammerTime.destroy && hammerTime.destroy();\n                            delete scope.hammerTime;\n                        } else {\n                            $dialog.unbind('click');\n                        }\n\n                        if (dialogsCount === 1) {\n                            $elements.body.unbind('keydown', privateMethods.onDocumentKeydown);\n                        }\n\n                        if (!$dialog.hasClass('ngdialog-closing')){\n                            dialogsCount -= 1;\n                        }\n\n                        var previousFocus = $dialog.data('$ngDialogPreviousFocus');\n                        if (previousFocus && previousFocus.focus) {\n                            previousFocus.focus();\n                        }\n\n                        $rootScope.$broadcast('ngDialog.closing', $dialog, value);\n                        dialogsCount = dialogsCount < 0 ? 0 : dialogsCount;\n                        if (animationEndSupport && !options.disableAnimation) {\n                            scope.$destroy();\n                            $dialog.unbind(animationEndEvent).bind(animationEndEvent, function () {\n                                privateMethods.closeDialogElement($dialog, value);\n                            }).addClass('ngdialog-closing');\n                        } else {\n                            scope.$destroy();\n                            privateMethods.closeDialogElement($dialog, value);\n                        }\n                        if (defers[id]) {\n                            defers[id].resolve({\n                                id: id,\n                                value: value,\n                                $dialog: $dialog,\n                                remainingDialogs: dialogsCount\n                            });\n                            delete defers[id];\n                        }\n                        if (scopes[id]) {\n                            delete scopes[id];\n                        }\n                        openIdStack.splice(openIdStack.indexOf(id), 1);\n                        if (!openIdStack.length) {\n                            $elements.body.unbind('keydown', privateMethods.onDocumentKeydown);\n                            keydownIsBound = false;\n                        }\n\n                        if (dialogsCount == 0)\n                        {\n                            closeByDocumentHandler = undefined;\n                        }\n                    },\n\n                    closeDialogElement: function($dialog, value) {\n                        var options = $dialog.data('$ngDialogOptions');\n                        $dialog.remove();\n                        if (dialogsCount === 0) {\n                            $elements.html.removeClass(options.bodyClassName);\n                            $elements.body.removeClass(options.bodyClassName);\n                            privateMethods.resetBodyPadding();\n                        }\n                        $rootScope.$broadcast('ngDialog.closed', $dialog, value);\n                    },\n\n                    closeDialog: function ($dialog, value) {\n                        var preCloseCallback = $dialog.data('$ngDialogPreCloseCallback');\n\n                        if (preCloseCallback && angular.isFunction(preCloseCallback)) {\n\n                            var preCloseCallbackResult = preCloseCallback.call($dialog, value);\n\n                            if (angular.isObject(preCloseCallbackResult)) {\n                                if (preCloseCallbackResult.closePromise) {\n                                    preCloseCallbackResult.closePromise.then(function () {\n                                        privateMethods.performCloseDialog($dialog, value);\n                                    }, function () {\n                                        return false;\n                                    });\n                                } else {\n                                    preCloseCallbackResult.then(function () {\n                                        privateMethods.performCloseDialog($dialog, value);\n                                    }, function () {\n                                        return false;\n                                    });\n                                }\n                            } else if (preCloseCallbackResult !== false) {\n                                privateMethods.performCloseDialog($dialog, value);\n                            } else {\n                                return false;\n                            }\n                        } else {\n                            privateMethods.performCloseDialog($dialog, value);\n                        }\n                    },\n\n                    onTrapFocusKeydown: function(ev) {\n                        var el = angular.element(ev.currentTarget);\n                        var $dialog;\n\n                        if (el.hasClass('ngdialog')) {\n                            $dialog = el;\n                        } else {\n                            $dialog = privateMethods.getActiveDialog();\n\n                            if ($dialog === null) {\n                                return;\n                            }\n                        }\n\n                        var isTab = (ev.keyCode === 9);\n                        var backward = (ev.shiftKey === true);\n\n                        if (isTab) {\n                            privateMethods.handleTab($dialog, ev, backward);\n                        }\n                    },\n\n                    handleTab: function($dialog, ev, backward) {\n                        var focusableElements = privateMethods.getFocusableElements($dialog);\n\n                        if (focusableElements.length === 0) {\n                            if (document.activeElement && document.activeElement.blur) {\n                                document.activeElement.blur();\n                            }\n                            return;\n                        }\n\n                        var currentFocus = document.activeElement;\n                        var focusIndex = Array.prototype.indexOf.call(focusableElements, currentFocus);\n\n                        var isFocusIndexUnknown = (focusIndex === -1);\n                        var isFirstElementFocused = (focusIndex === 0);\n                        var isLastElementFocused = (focusIndex === focusableElements.length - 1);\n\n                        var cancelEvent = false;\n\n                        if (backward) {\n                            if (isFocusIndexUnknown || isFirstElementFocused) {\n                                focusableElements[focusableElements.length - 1].focus();\n                                cancelEvent = true;\n                            }\n                        } else {\n                            if (isFocusIndexUnknown || isLastElementFocused) {\n                                focusableElements[0].focus();\n                                cancelEvent = true;\n                            }\n                        }\n\n                        if (cancelEvent) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                        }\n                    },\n\n                    autoFocus: function($dialog) {\n                        var dialogEl = $dialog[0];\n\n                        // Browser's (Chrome 40, Forefix 37, IE 11) don't appear to honor autofocus on the dialog, but we should\n                        var autoFocusEl = dialogEl.querySelector('*[autofocus]');\n                        if (autoFocusEl !== null) {\n                            autoFocusEl.focus();\n\n                            if (document.activeElement === autoFocusEl) {\n                                return;\n                            }\n\n                            // Autofocus element might was display: none, so let's continue\n                        }\n\n                        var focusableElements = privateMethods.getFocusableElements($dialog);\n\n                        if (focusableElements.length > 0) {\n                            focusableElements[0].focus();\n                            return;\n                        }\n\n                        // We need to focus something for the screen readers to notice the dialog\n                        var contentElements = privateMethods.filterVisibleElements(dialogEl.querySelectorAll('h1,h2,h3,h4,h5,h6,p,span'));\n\n                        if (contentElements.length > 0) {\n                            var contentElement = contentElements[0];\n                            $el(contentElement).attr('tabindex', '-1').css('outline', '0');\n                            contentElement.focus();\n                        }\n                    },\n\n                    getFocusableElements: function ($dialog) {\n                        var dialogEl = $dialog[0];\n\n                        var rawElements = dialogEl.querySelectorAll(focusableElementSelector);\n\n                        // Ignore untabbable elements, ie. those with tabindex = -1\n                        var tabbableElements = privateMethods.filterTabbableElements(rawElements);\n\n                        return privateMethods.filterVisibleElements(tabbableElements);\n                    },\n\n                    filterTabbableElements: function (els) {\n                        var tabbableFocusableElements = [];\n\n                        for (var i = 0; i < els.length; i++) {\n                            var el = els[i];\n\n                            if ($el(el).attr('tabindex') !== '-1') {\n                                tabbableFocusableElements.push(el);\n                            }\n                        }\n\n                        return tabbableFocusableElements;\n                    },\n\n                    filterVisibleElements: function (els) {\n                        var visibleFocusableElements = [];\n\n                        for (var i = 0; i < els.length; i++) {\n                            var el = els[i];\n\n                            if (el.offsetWidth > 0 || el.offsetHeight > 0) {\n                                visibleFocusableElements.push(el);\n                            }\n                        }\n\n                        return visibleFocusableElements;\n                    },\n\n                    getActiveDialog: function () {\n                        var dialogs = document.querySelectorAll('.ngdialog');\n\n                        if (dialogs.length === 0) {\n                            return null;\n                        }\n\n                        // TODO: This might be incorrect if there are a mix of open dialogs with different 'appendTo' values\n                        return $el(dialogs[dialogs.length - 1]);\n                    },\n\n                    applyAriaAttributes: function ($dialog, options) {\n                        if (options.ariaAuto) {\n                            if (!options.ariaRole) {\n                                var detectedRole = (privateMethods.getFocusableElements($dialog).length > 0) ?\n                                    'dialog' :\n                                    'alertdialog';\n\n                                options.ariaRole = detectedRole;\n                            }\n\n                            if (!options.ariaLabelledBySelector) {\n                                options.ariaLabelledBySelector = 'h1,h2,h3,h4,h5,h6';\n                            }\n\n                            if (!options.ariaDescribedBySelector) {\n                                options.ariaDescribedBySelector = 'article,section,p';\n                            }\n                        }\n\n                        if (options.ariaRole) {\n                            $dialog.attr('role', options.ariaRole);\n                        }\n\n                        privateMethods.applyAriaAttribute(\n                            $dialog, 'aria-labelledby', options.ariaLabelledById, options.ariaLabelledBySelector);\n\n                        privateMethods.applyAriaAttribute(\n                            $dialog, 'aria-describedby', options.ariaDescribedById, options.ariaDescribedBySelector);\n                    },\n\n                    applyAriaAttribute: function($dialog, attr, id, selector) {\n                        if (id) {\n                            $dialog.attr(attr, id);\n                            return;\n                        }\n\n                        if (selector) {\n                            var dialogId = $dialog.attr('id');\n\n                            var firstMatch = $dialog[0].querySelector(selector);\n\n                            if (!firstMatch) {\n                                return;\n                            }\n\n                            var generatedId = dialogId + '-' + attr;\n\n                            $el(firstMatch).attr('id', generatedId);\n\n                            $dialog.attr(attr, generatedId);\n\n                            return generatedId;\n                        }\n                    },\n\n                    detectUIRouter: function() {\n                        //Detect if ui-router module is installed if not return false\n                        try {\n                            angular.module('ui.router');\n                            return true;\n                        } catch(err) {\n                            return false;\n                        }\n                    },\n\n                    getRouterLocationEventName: function() {\n                        if(privateMethods.detectUIRouter()) {\n                            return '$stateChangeStart';\n                        }\n                        return '$locationChangeStart';\n                    }\n                };\n\n                var publicMethods = {\n                    __PRIVATE__: privateMethods,\n\n                    /*\n                     * @param {Object} options:\n                     * - template {String} - id of ng-template, url for partial, plain string (if enabled)\n                     * - plain {Boolean} - enable plain string templates, default false\n                     * - scope {Object}\n                     * - controller {String}\n                     * - controllerAs {String}\n                     * - className {String} - dialog theme class\n                     * - appendClassName {String} - dialog theme class to be appended to defaults\n                     * - disableAnimation {Boolean} - set to true to disable animation\n                     * - showClose {Boolean} - show close button, default true\n                     * - closeByEscape {Boolean} - default true\n                     * - closeByDocument {Boolean} - default true\n                     * - preCloseCallback {String|Function} - user supplied function name/function called before closing dialog (if set)\n                     * - onOpenCallback {String|Function} - user supplied function name/function called after opening dialog (if set)\n                     * - bodyClassName {String} - class added to body at open dialog\n                     * @return {Object} dialog\n                     */\n                    open: function (opts) {\n                        var dialogID = null;\n                        opts = opts || {};\n                        if (openOnePerName && opts.name) {\n                            dialogID = opts.name.toLowerCase().replace(/\\s/g, '-') + '-dialog';\n                            if (this.isOpen(dialogID)) {\n                                return;\n                            }\n                        }\n                        var options = angular.copy(defaults);\n                        var localID = ++globalID;\n                        dialogID = dialogID || 'ngdialog' + localID;\n                        openIdStack.push(dialogID);\n\n                        // Merge opts.data with predefined via setDefaults\n                        if (typeof options.data !== 'undefined') {\n                            if (typeof opts.data === 'undefined') {\n                                opts.data = {};\n                            }\n                            opts.data = angular.merge(angular.copy(options.data), opts.data);\n                        }\n\n                        angular.extend(options, opts);\n\n                        var defer;\n                        defers[dialogID] = defer = $q.defer();\n\n                        var scope;\n                        scopes[dialogID] = scope = angular.isObject(options.scope) ? options.scope.$new() : $rootScope.$new();\n\n                        var $dialog, $dialogParent, $dialogContent;\n\n                        var resolve = angular.extend({}, options.resolve);\n\n                        angular.forEach(resolve, function (value, key) {\n                            resolve[key] = angular.isString(value) ? $injector.get(value) : $injector.invoke(value, null, null, key);\n                        });\n\n                        $q.all({\n                            template: loadTemplate(options.template || options.templateUrl),\n                            locals: $q.all(resolve)\n                        }).then(function (setup) {\n                            var template = setup.template,\n                                locals = setup.locals;\n\n                            if (options.showClose) {\n                                template += '<button aria-label=\"Dismiss\" class=\"ngdialog-close\"></button>';\n                            }\n\n                            var hasOverlayClass = options.overlay ? '' : ' ngdialog-no-overlay';\n                            $dialog = $el('<div id=\"' + dialogID + '\" class=\"ngdialog' + hasOverlayClass + '\"></div>');\n                            $dialog.html((options.overlay ?\n                                '<div class=\"ngdialog-overlay\"></div><div class=\"ngdialog-content\" role=\"document\">' + template + '</div>' :\n                                '<div class=\"ngdialog-content\" role=\"document\">' + template + '</div>'));\n\n                            $dialog.data('$ngDialogOptions', options);\n\n                            scope.ngDialogId = dialogID;\n\n                            if (options.data && angular.isString(options.data)) {\n                                var firstLetter = options.data.replace(/^\\s*/, '')[0];\n                                scope.ngDialogData = (firstLetter === '{' || firstLetter === '[') ? angular.fromJson(options.data) : new String(options.data);\n                                scope.ngDialogData.ngDialogId = dialogID;\n                            } else if (options.data && angular.isObject(options.data)) {\n                                scope.ngDialogData = options.data;\n                                scope.ngDialogData.ngDialogId = dialogID;\n                            }\n\n                            if (options.className) {\n                                $dialog.addClass(options.className);\n                            }\n\n                            if (options.appendClassName) {\n                                $dialog.addClass(options.appendClassName);\n                            }\n\n                            if (options.width) {\n                                $dialogContent = $dialog[0].querySelector('.ngdialog-content');\n                                if (angular.isString(options.width)) {\n                                    $dialogContent.style.width = options.width;\n                                } else {\n                                    $dialogContent.style.width = options.width + 'px';\n                                }\n                            }\n\n                            if (options.height) {\n                                $dialogContent = $dialog[0].querySelector('.ngdialog-content');\n                                if (angular.isString(options.height)) {\n                                    $dialogContent.style.height = options.height;\n                                } else {\n                                    $dialogContent.style.height = options.height + 'px';\n                                }\n                            }\n\n                            if (options.disableAnimation) {\n                                $dialog.addClass(disabledAnimationClass);\n                            }\n\n                            if (options.appendTo && angular.isString(options.appendTo)) {\n                                $dialogParent = angular.element(document.querySelector(options.appendTo));\n                            } else {\n                                $dialogParent = $elements.body;\n                            }\n\n                            privateMethods.applyAriaAttributes($dialog, options);\n\n                            [\n                                { name: '$ngDialogPreCloseCallback', value: options.preCloseCallback },\n                                { name: '$ngDialogOnOpenCallback', value: options.onOpenCallback }\n                            ].forEach(function (option) {\n                                if (option.value) {\n                                    var callback;\n\n                                    if (angular.isFunction(option.value)) {\n                                        callback = option.value;\n                                    } else if (angular.isString(option.value)) {\n                                        if (scope) {\n                                            if (angular.isFunction(scope[option.value])) {\n                                                callback = scope[option.value];\n                                            } else if (scope.$parent && angular.isFunction(scope.$parent[option.value])) {\n                                                callback = scope.$parent[option.value];\n                                            } else if ($rootScope && angular.isFunction($rootScope[option.value])) {\n                                                callback = $rootScope[option.value];\n                                            }\n                                        }\n                                    }\n\n                                    if (callback) {\n                                        $dialog.data(option.name, callback);\n                                    }\n                                }\n                            });\n\n                            scope.closeThisDialog = function (value) {\n                                privateMethods.closeDialog($dialog, value);\n                            };\n\n                            if (options.controller && (angular.isString(options.controller) || angular.isArray(options.controller) || angular.isFunction(options.controller))) {\n\n                                var label;\n\n                                if (options.controllerAs && angular.isString(options.controllerAs)) {\n                                    label = options.controllerAs;\n                                }\n\n                                var controllerInstance = $controller(options.controller, angular.extend(\n                                    locals,\n                                    {\n                                        $scope: scope,\n                                        $element: $dialog\n                                    }),\n                                    true,\n                                    label\n                                );\n\n                                if(options.bindToController) {\n                                    angular.extend(controllerInstance.instance, {ngDialogId: scope.ngDialogId, ngDialogData: scope.ngDialogData, closeThisDialog: scope.closeThisDialog, confirm: scope.confirm});\n                                }\n\n                                if(typeof controllerInstance === 'function'){\n                                    $dialog.data('$ngDialogControllerController', controllerInstance());\n                                } else {\n                                    $dialog.data('$ngDialogControllerController', controllerInstance);\n                                }\n                            }\n\n                            $timeout(function () {\n                                var $activeDialogs = document.querySelectorAll('.ngdialog');\n                                privateMethods.deactivateAll($activeDialogs);\n\n                                $compile($dialog)(scope);\n                                var widthDiffs = $window.innerWidth - $elements.body.prop('clientWidth');\n                                $elements.html.addClass(options.bodyClassName);\n                                $elements.body.addClass(options.bodyClassName);\n                                var scrollBarWidth = widthDiffs - ($window.innerWidth - $elements.body.prop('clientWidth'));\n                                if (scrollBarWidth > 0) {\n                                    privateMethods.setBodyPadding(scrollBarWidth);\n                                }\n                                $dialogParent.append($dialog);\n\n                                privateMethods.activate($dialog);\n\n                                if (options.trapFocus) {\n                                    privateMethods.autoFocus($dialog);\n                                }\n\n                                if (options.name) {\n                                    $rootScope.$broadcast('ngDialog.opened', {dialog: $dialog, name: options.name});\n                                } else {\n                                    $rootScope.$broadcast('ngDialog.opened', $dialog);\n                                }\n                                var onOpenCallback = $dialog.data('$ngDialogOnOpenCallback');\n                                if (onOpenCallback && angular.isFunction(onOpenCallback)) {\n                                    onOpenCallback.call($dialog);\n                                }\n\n                            });\n\n                            if (!keydownIsBound) {\n                                $elements.body.bind('keydown', privateMethods.onDocumentKeydown);\n                                keydownIsBound = true;\n                            }\n\n                            if (options.closeByNavigation) {\n                                var eventName = privateMethods.getRouterLocationEventName();\n                                $rootScope.$on(eventName, function ($event) {\n                                    if (privateMethods.closeDialog($dialog) === false)\n                                        $event.preventDefault();\n                                });\n                            }\n\n                            if (options.preserveFocus) {\n                                $dialog.data('$ngDialogPreviousFocus', document.activeElement);\n                            }\n\n                            closeByDocumentHandler = function (event) {\n                                var isOverlay = options.closeByDocument ? $el(event.target).hasClass('ngdialog-overlay') : false;\n                                var isCloseBtn = $el(event.target).hasClass('ngdialog-close');\n\n                                if (isOverlay || isCloseBtn) {\n                                    publicMethods.close($dialog.attr('id'), isCloseBtn ? '$closeButton' : '$document');\n                                }\n                            };\n\n                            if (typeof $window.Hammer !== 'undefined') {\n                                var hammerTime = scope.hammerTime = $window.Hammer($dialog[0]);\n                                hammerTime.on('tap', closeByDocumentHandler);\n                            } else {\n                                $dialog.bind('click', closeByDocumentHandler);\n                            }\n\n                            dialogsCount += 1;\n\n                            return publicMethods;\n                        });\n\n                        return {\n                            id: dialogID,\n                            closePromise: defer.promise,\n                            close: function (value) {\n                                privateMethods.closeDialog($dialog, value);\n                            }\n                        };\n\n                        function loadTemplateUrl (tmpl, config) {\n                            var config = config || {};\n                            config.headers = config.headers || {};\n\n                            angular.extend(config.headers, {'Accept': 'text/html'});\n\n                            $rootScope.$broadcast('ngDialog.templateLoading', tmpl);\n                            return $http.get(tmpl, config).then(function(res) {\n                                $rootScope.$broadcast('ngDialog.templateLoaded', tmpl);\n                                return res.data || '';\n                            });\n                        }\n\n                        function loadTemplate (tmpl) {\n                            if (!tmpl) {\n                                return 'Empty template';\n                            }\n\n                            if (angular.isString(tmpl) && options.plain) {\n                                return tmpl;\n                            }\n\n                            if (typeof options.cache === 'boolean' && !options.cache) {\n                                return loadTemplateUrl(tmpl, {cache: false});\n                            }\n\n                            return loadTemplateUrl(tmpl, {cache: $templateCache});\n                        }\n                    },\n\n                    /*\n                     * @param {Object} options:\n                     * - template {String} - id of ng-template, url for partial, plain string (if enabled)\n                     * - plain {Boolean} - enable plain string templates, default false\n                     * - name {String}\n                     * - scope {Object}\n                     * - controller {String}\n                     * - controllerAs {String}\n                     * - className {String} - dialog theme class\n                     * - appendClassName {String} - dialog theme class to be appended to defaults\n                     * - showClose {Boolean} - show close button, default true\n                     * - closeByEscape {Boolean} - default false\n                     * - closeByDocument {Boolean} - default false\n                     * - preCloseCallback {String|Function} - user supplied function name/function called before closing dialog (if set); not called on confirm\n                     * - bodyClassName {String} - class added to body at open dialog\n                     *\n                     * @return {Object} dialog\n                     */\n                    openConfirm: function (opts) {\n                        var defer = $q.defer();\n                        var options = angular.copy(defaults);\n\n                        opts = opts || {};\n\n                        // Merge opts.data with predefined via setDefaults\n                        if (typeof options.data !== 'undefined') {\n                            if (typeof opts.data === 'undefined') {\n                                opts.data = {};\n                            }\n                            opts.data = angular.merge(angular.copy(options.data), opts.data);\n                        }\n\n                        angular.extend(options, opts);\n\n                        options.scope = angular.isObject(options.scope) ? options.scope.$new() : $rootScope.$new();\n                        options.scope.confirm = function (value) {\n                            defer.resolve(value);\n                            var $dialog = $el(document.getElementById(openResult.id));\n                            privateMethods.performCloseDialog($dialog, value);\n                        };\n\n                        var openResult = publicMethods.open(options);\n                        if (openResult) {\n                            openResult.closePromise.then(function (data) {\n                                if (data) {\n                                    return defer.reject(data.value);\n                                }\n                                return defer.reject();\n                            });\n                            return defer.promise;\n                        }\n                    },\n\n                    isOpen: function(id) {\n                        var $dialog = $el(document.getElementById(id));\n                        return $dialog.length > 0;\n                    },\n\n                    /*\n                     * @param {String} id\n                     * @return {Object} dialog\n                     */\n                    close: function (id, value) {\n                        var $dialog = $el(document.getElementById(id));\n\n                        if ($dialog.length) {\n                            privateMethods.closeDialog($dialog, value);\n                        } else {\n                            if (id === '$escape') {\n                                var topDialogId = openIdStack[openIdStack.length - 1];\n                                $dialog = $el(document.getElementById(topDialogId));\n                                if ($dialog.data('$ngDialogOptions').closeByEscape) {\n                                    privateMethods.closeDialog($dialog, '$escape');\n                                }\n                            } else {\n                                publicMethods.closeAll(value);\n                            }\n                        }\n\n                        return publicMethods;\n                    },\n\n                    closeAll: function (value) {\n                        var $all = document.querySelectorAll('.ngdialog');\n\n                        // Reverse order to ensure focus restoration works as expected\n                        for (var i = $all.length - 1; i >= 0; i--) {\n                            var dialog = $all[i];\n                            privateMethods.closeDialog($el(dialog), value);\n                        }\n                    },\n\n                    getOpenDialogs: function() {\n                        return openIdStack;\n                    },\n\n                    getDefaults: function () {\n                        return defaults;\n                    }\n                };\n\n                angular.forEach(\n                    ['html', 'body'],\n                    function(elementName) {\n                        $elements[elementName] = $document.find(elementName);\n                        if (forceElementsReload[elementName]) {\n                            var eventName = privateMethods.getRouterLocationEventName();\n                            $rootScope.$on(eventName, function () {\n                                $elements[elementName] = $document.find(elementName);\n                            });\n                        }\n                    }\n                );\n\n                return publicMethods;\n            }];\n    });\n\n    m.directive('ngDialog', ['ngDialog', function (ngDialog) {\n        return {\n            restrict: 'A',\n            scope: {\n                ngDialogScope: '='\n            },\n            link: function (scope, elem, attrs) {\n                elem.on('click', function (e) {\n                    e.preventDefault();\n\n                    var ngDialogScope = angular.isDefined(scope.ngDialogScope) ? scope.ngDialogScope : 'noScope';\n                    angular.isDefined(attrs.ngDialogClosePrevious) && ngDialog.close(attrs.ngDialogClosePrevious);\n\n                    var defaults = ngDialog.getDefaults();\n\n                    ngDialog.open({\n                        template: attrs.ngDialog,\n                        className: attrs.ngDialogClass || defaults.className,\n                        appendClassName: attrs.ngDialogAppendClass,\n                        controller: attrs.ngDialogController,\n                        controllerAs: attrs.ngDialogControllerAs,\n                        bindToController: attrs.ngDialogBindToController,\n                        disableAnimation: attrs.ngDialogDisableAnimation,\n                        scope: ngDialogScope,\n                        data: attrs.ngDialogData,\n                        showClose: attrs.ngDialogShowClose === 'false' ? false : (attrs.ngDialogShowClose === 'true' ? true : defaults.showClose),\n                        closeByDocument: attrs.ngDialogCloseByDocument === 'false' ? false : (attrs.ngDialogCloseByDocument === 'true' ? true : defaults.closeByDocument),\n                        closeByEscape: attrs.ngDialogCloseByEscape === 'false' ? false : (attrs.ngDialogCloseByEscape === 'true' ? true : defaults.closeByEscape),\n                        overlay: attrs.ngDialogOverlay === 'false' ? false : (attrs.ngDialogOverlay === 'true' ? true : defaults.overlay),\n                        preCloseCallback: attrs.ngDialogPreCloseCallback || defaults.preCloseCallback,\n                        onOpenCallback: attrs.ngDialogOnOpenCallback || defaults.onOpenCallback,\n                        bodyClassName: attrs.ngDialogBodyClass || defaults.bodyClassName\n                    });\n                });\n            }\n        };\n    }]);\n\n    return m;\n}));\n"],"sourceRoot":"assets/scripts/"}