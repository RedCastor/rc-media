{"version":3,"sources":["rc-media.js","rc-media-constants.js","rc-media-gallery-controls.js","rc-media-gallery.js","rc-media-search.js","rc-media-translate.js","rc-media-upload-controls.js","rc-media-upload.js","rc-media-controller.js","rc-media-services.js","tpls-media.js"],"names":["angular","module","constant","SELECT_FILES","CROP_IMAGE","PROGRESS_FILES","directive","$log","$parse","$compile","restrict","require","scope","deleteClick","saveClick","templateUrl","elem","attrs","rcmTemplateUrl","link","rcMediaApi","loading","deleteSources","then","response_success","bindResize","response_error","$parent","$applyAsync","deselectSources","saveSources","galleryControlsElement","element","$window","$timeout","sources","seletedSources","order","multiple","search","loadIcon","alerts","loadMore","isDefined","onChangeGalleryLoading","newValue","oldValue","gallery","isObject","result","message","push","type","msg","onChangeSources","debug","onChangeSourcesSelected","selectSource","source","index","sourcesSelected","loadMoreSources","length","closeAlert","splice","galleryElement","initMediaGallery","$watchCollection","$watch","value","onSearch","newVal","oldVal","searchSources","searchElement","initMediaSearch","rcMedia","ref","html","text","getLocalizedText","replace","file","cancelClick","uploadFile","upload","evt","cancelUploadFile","resetUploadFile","back","uploadControlsElement","accept","pattern","fileName","minWidth","minHeight","fixOrientation","crop","cropArea","progress","currentState","crop_area_default","auto","width","height","cropWidth","cropHeight","keepAspect","enforceCropAspect","touchRadius","color","colorDrag","colorBg","colorCropBg","extend","onChangeUploadLoading","onChangeUploadResult","addAlert","onChangeUploadFile","onChangeUploadMultiple","onChangeUploadCrop","onChangeUploadProgress","onChangeUploadCurrentState","uploadSelectFiles","$files","changeFiles","$file","$newFiles","$duplicateFiles","$invalidFiles","$event","err_text","forEach","file_key","i","$errorMessages","key","uploadElement","initMediaUpload","model","modelPreview","sourceUrl","returnModelType","returnModelKey","returnModelPush","sourceId","sourceUrlKey","sourceTitle","sourcesOffsetKey","sourcesLimitKey","sourcesSearchKey","deleteQuery","sourcesQuery","onMediaReady","onUploadUpdateState","onUploadFile","onResetUploadFile","onSaveSources","onDeleteSources","onSelectSource","onSearchSources","onLoadMoreSources","controller","controllerAs","post","attr","rcMediaElement","$scope","$q","$injector","$filter","RCMEDIA_UPLOAD_STATES","rcMediaService","this","init","deferred","$eval","isUndefined","addBindings","$rcMediaApi","isString","getSources","setUploadState","getSourceTitle","source_title_list","split","find_source","title","join","newState","$state","Upload","get","imageDimensions","dimensions","viewWidth","clientWidth","viewHeight","clientHeight","ratioH","ratioW","ratio","parseInt","error","err","defer","destDataUrl","$ngfBlobUrl","dataUrltoBlob","name","ext","$ngfName","slice","lastIndexOf","url","getRestUrl","data","addSource","resolve","reject","progressPercentage","loaded","total","notify","promise","abort","indexOf","activeClass","$source","index_source","sources_query","sources_deferred","all","delete","removeSource","status","defer_all","deleted_index","map","o","tooltipTitle","copy","new_model","toString","concat","$model","$search","dispatchEvent","Event","config","$resourceProvider","defaults","cancellable","provider","rcMediaProvider","rest","path","locale","defaultText","en-us","TITLE_GALLERY","TITLE_UPLOAD","TITLE_DRAG_FILE","SUB_TITLE_DRAG_FILE","BTN_CANCEL","BTN_SAVE","BTN_DELETE_FILE","BTN_DELETE_FILES","BTN_DESELECT_ALL","BTN_SELECT_FILE","BTN_SELECT_FILES","BTN_SHOW_MORE","BTN_BACK_GALLERY","BTN_UPLOAD_FILE","BTN_UPLOAD_FILES","BTN_BROWSE_FILE","UPLOAD_INVALID_FILE","UPLOAD_INVALID_minWidth","UPLOAD_INVALID_minHeight","UPLOAD_INVALID_pattern","fr-FR","interfaceText","$get","$http","$locale","localizedText","useXDomain","headers","common","id","getRest","item","setLocalizedText","localeId","obj","Error","useLocale","setRest","factory","$resource","rest_url","resource","Media","mediaId","method","isArray","cache","query","params","rcMediaResource","service","cancel","request","undefined","isFunction","$cancelRequest","isNumber","$promise","source_id","delete_query","run","$templateCache","put"],"mappings":"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","file":"rc-media.js","sourcesContent":["(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n\n    module.directive(\"rcMedia\", [ function () {\n        return {\n            restrict: \"EA\",\n            require   : ['?ngModel'],\n            scope     : {\n                model        : '=ngModel',\n                modelPreview : '=ngModelPreview',\n                sourceUrl    : '@rcmSourceUrl',\n                returnModelType : '@rcmReturnModelType',\n                returnModelKey  : '@rcmReturnModelKey',\n                returnModelPush : '=?rcmReturnModelPush',\n                sourceId     : '@rcmSourceId',\n                sourceUrlKey : '@rcmSourceUrlKey',\n                sourceTitle  : '@rcmSourceTitle',\n                sourcesOffsetKey: '@rcmSourcesOffsetKey',\n                sourcesLimitKey : '@rcmSourcesLimitKey',\n                sourcesSearchKey: '@rcmSourcesSearchKey',\n                deleteQuery     : '@rcmDeleteQuery',\n                sourcesQuery    : '@rcmSourcesQuery',\n                onMediaReady       : '&rcmOnMediaReady',\n                onUploadUpdateState: \"&rcmOnUploadUpdateState\",\n                onUploadFile       : '&rcmOnUploadFile',\n                onResetUploadFile  : '&rcmOnResetUploadFile',\n                onSaveSources      : '&rcmOnSaveSources',\n                onDeleteSources    : '&rcmOnDeleteSources',\n                onSelectSource     : '&rcmOnSelectSource',\n                onSearchSources    : '&rcmOnSearchSources',\n                onLoadMoreSources  : '&rcmOnLoadMoreSources'\n            },\n            controller: \"rcMediaCtrl\",\n            controllerAs: \"rcMediaApi\",\n            link: {\n                post: function (scope, elem, attr, controller) {\n                    scope.rcMediaApi.rcMediaElement = angular.element(elem);\n                }\n            }\n        };\n    }]);\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n\n    var module = angular.module('rcMedia');\n\n    module.constant(\"RCMEDIA_UPLOAD_STATES\", {\n        SELECT_FILES  : \"selectFiles\",\n        CROP_IMAGE   : \"cropImage\",\n        PROGRESS_FILES: \"progressFiles\"\n    });\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n\n    module.directive(\"rcmGalleryControls\", [ '$log', '$parse', '$compile', function ($log, $parse, $compile) {\n        return {\n            restrict  : 'EA',\n            require: \"^rcMedia\",\n            scope     : {\n                deleteClick: '@?rcmDeleteClick',\n                saveClick: '@?rcmSaveClick'\n            },\n            templateUrl: function (elem, attrs) {\n                return attrs.rcmTemplateUrl || 'rc-media-gallery-controls.tpl.html';\n            },\n            link: function (scope, elem, attrs, rcMediaApi) {\n\n                scope.loading = false;\n\n                scope.deleteSources = function () {\n                    scope.loading = true;\n\n                    rcMediaApi.deleteSources().then(\n                        function (response_success) {\n                            scope.loading = false;\n                            rcMediaApi.bindResize();\n                        },\n                        function (response_error) {\n                            scope.loading = false;\n                            rcMediaApi.bindResize();\n                        }\n                    );\n\n                    scope.$parent.$parent.$applyAsync($parse(scope.deleteClick));\n                };\n\n                scope.deselectSources = function () {\n                    rcMediaApi.deselectSources();\n                };\n\n                scope.saveSources = function () {\n                    rcMediaApi.saveSources();\n\n                    scope.$parent.$parent.$applyAsync($parse(scope.saveClick));\n                };\n\n\n                // INIT\n                rcMediaApi.galleryControlsElement = angular.element(elem);\n                scope.rcMediaApi = rcMediaApi;\n            }\n        };\n    }]);\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n    module.directive(\"rcmGallery\", ['$window', '$timeout', '$log', function ($window, $timeout, $log) {\n        return {\n            restrict  : 'EA',\n            require: \"^rcMedia\",\n            scope     : {\n                sources  : '=?ngModel',\n                seletedSources  : '=?rcmSelectedSources',\n                order   : '@?rcmOrder',\n                multiple: '=?rcmMultiple',\n                search  : '@?rcmSearchValue',\n                loadIcon : '@?rcmLoadIcon'\n            },\n            templateUrl: function (elem, attrs) {\n                return attrs.rcmTemplateUrl  || 'rc-media-gallery.tpl.html';\n            },\n            link: function (scope, elem, attrs, rcMediaApi) {\n\n                scope.alerts = [];\n                scope.loading = false;\n                scope.loadMore = false;\n\n                scope.sources = angular.isDefined(scope.sources) ? scope.sources : [];\n                scope.seletedSources = angular.isDefined(scope.seletedSources) ? scope.seletedSources : [];\n                scope.order = angular.isDefined(scope.order) ? scope.order : 'date';\n                scope.multiple = angular.isDefined(scope.multiple) ? scope.multiple : false;\n                scope.search = angular.isDefined(scope.search) ? scope.search : '';\n\n                // FUNCTIONS\n                scope.onChangeGalleryLoading = function (newValue, oldValue) {\n\n                    if (newValue === false) {\n                        scope.loadMore = rcMediaApi.gallery.loadMore;\n\n                        if (angular.isObject(rcMediaApi.gallery.result) && angular.isDefined(rcMediaApi.gallery.result.message)) {\n                            scope.alerts.push({type: 'alert', msg: rcMediaApi.gallery.result.message});\n                        }\n                    }\n                    else {\n                        scope.alerts = [];\n                    }\n\n                    scope.loading = newValue;\n                };\n\n                scope.onChangeSources = function (newValue, oldValue) {\n                    $log.debug('onChangeSources');\n                    if (newValue !== oldValue) {\n                        $log.debug('onChangeSources');\n                        scope.sources = newValue;\n                    }\n                };\n                scope.onChangeSourcesSelected = function (newValue, oldValue) {\n\n                    if (newValue !== oldValue) {\n                        $log.debug('onChangeSourcesSelected');\n                        scope.seletedSources = newValue;\n                    }\n                };\n\n                scope.selectSource = function (source, index) {\n                    rcMediaApi.selectSource(source, index);\n                    scope.seletedSources = rcMediaApi.sourcesSelected;\n                };\n\n                scope.loadMoreSources = function () {\n\n                    rcMediaApi.loadMoreSources().then(\n                        function (response_success) {\n                            scope.loadMore = response_success.length > 0 ? true : false;\n\n                            rcMediaApi.bindResize();\n                        },\n                        function (response_error) {\n                            rcMediaApi.bindResize();\n                        }\n                    );\n                };\n\n                scope.closeAlert = function(index) {\n                    scope.alerts.splice(index, 1);\n                };\n\n                // INIT\n                rcMediaApi.galleryElement = angular.element(elem);\n                rcMediaApi.initMediaGallery( {\n                        loading: scope.loading,\n                        order: scope.order,\n                        multiple: scope.multiple,\n                        loadMore: scope.loadMore\n                    },\n                    scope.search\n                );\n\n\n                scope.rcMediaApi = rcMediaApi;\n\n                scope.$watchCollection('rcMediaApi.sources', scope.onChangeSources);\n                scope.$watchCollection('rcMediaApi.sourcesSelected', scope.onChangeSourcesSelected);\n                scope.$watch('rcMediaApi.gallery.loading', scope.onChangeGalleryLoading);\n\n            }\n        };\n    }]);\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n    module.directive(\"rcmSearch\", [ '$log', function ($log) {\n        return {\n            restrict  : 'EA',\n            require   : '^rcMedia',\n            scope     : {\n                search: '=?ngModel',\n                value : '@?rcmValue'\n            },\n            templateUrl: function (elem, attrs) {\n                return attrs.rcmTemplateUrl || 'rc-media-search.tpl.html';\n            },\n            link: function (scope, elem, attrs, rcMediaApi) {\n\n                scope.search = angular.isDefined(scope.value) ? scope.value : scope.search;\n                scope.value = angular.isDefined(scope.value) ? scope.value : '';\n\n                scope.onSearch = function (newVal, oldVal) {\n\n                    if (newVal !== oldVal) {\n                        $log.debug('onSearch');\n                        rcMediaApi.search = newVal;\n                        rcMediaApi.searchSources();\n                    }\n                };\n\n                // INIT\n                rcMediaApi.searchElement = angular.element(elem);\n                rcMediaApi.initMediaSearch( scope.search );\n\n                scope.rcMediaApi = rcMediaApi;\n\n                scope.$watch('search', scope.onSearch);\n            }\n        };\n    }]);\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n    module.directive(\"rcmTranslate\", [ '$log', 'rcMedia', function ($log, rcMedia) {\n        return {\n            restrict  : 'EA',\n            require: \"^rcMedia\",\n            link: function (scope, elem, attrs, rcMediaApi) {\n\n                var ref = elem.html();\n\n                if (ref.length > 0) {\n                    var text = rcMedia.getLocalizedText(ref);\n                    elem.html(elem.html().replace(ref, text));\n                }\n            }\n        };\n    }]);\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n\n    module.directive(\"rcmUploadControls\", [ '$log', '$parse', '$compile', function ($log, $parse, $compile) {\n        return {\n            restrict  : 'EA',\n            require: \"^rcMedia\",\n            scope     : {\n                file  : '=?ngModel',\n                saveClick: '@?rcmSaveClick',\n                cancelClick: '@?rcmCancelClick'\n            },\n            templateUrl: function (elem, attrs) {\n                return attrs.rcmTemplateUrl || 'rc-media-upload-controls.tpl.html';\n            },\n            link: function (scope, elem, attrs, rcMediaApi) {\n\n                scope.file = angular.isDefined(scope.file) ? scope.file : null;\n\n                scope.uploadFile = function () {\n                    scope.file = rcMediaApi.upload.file;\n\n                    return rcMediaApi.uploadFile().then(\n                        function (response_success) {\n                            $log.debug(response_success);\n                            scope.$parent.$parent.$applyAsync($parse(scope.saveClick));\n                        },\n                        function (response_error) {\n                            $log.debug(response_error);\n                        },\n                        function (evt) {\n                            $log.debug(evt);\n                        }\n                    );\n                };\n\n                scope.cancelUploadFile = function () {\n                    rcMediaApi.cancelUploadFile();\n                };\n\n                scope.resetUploadFile = function (back) {\n                    scope.file = null;\n                    rcMediaApi.resetUploadFile();\n\n                    if (back === true) {\n                        scope.$parent.$parent.$applyAsync($parse(scope.cancelClick));\n                    }\n                };\n\n                // INIT\n                rcMediaApi.uploadControlsElement = angular.element(elem);\n                scope.rcMediaApi = rcMediaApi;\n            }\n        };\n    }]);\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n    module.directive(\"rcmUpload\", [ 'rcMedia', '$log', function (rcMedia, $log) {\n        return {\n            restrict  : 'EA',\n            require: \"^rcMedia\",\n            scope     : {\n                file      : '=?ngModel',\n                multiple  : '=?rcmMultiple',\n                accept    : '@?rcmAccept',\n                pattern   : '@?rcmPattern',\n                fileName  : '@?rcmFileName',\n                minWidth  : '=?rcmMinWidth',\n                minHeight : '=?rcmMinHeight',\n                fixOrientation: '=?rcmFixOrientation',\n                crop      : '=?rcmCrop',\n                cropArea  : '=?rcmCropArea',\n                loadIcon : '@?rcmLoadIcon'\n            },\n            templateUrl: function (elem, attrs) {\n                return attrs.rcmTemplateUrl || 'rc-media-upload.tpl.html';\n            },\n            link: function (scope, elem, attrs, rcMediaApi) {\n\n                scope.alerts = [];\n                scope.loading = false;\n                scope.progress = 0;\n                scope.currentState = '';\n\n                scope.file = angular.isDefined(scope.file) ? scope.file : rcMediaApi.resetUploadFile();\n                scope.multiple = angular.isDefined(scope.multiple) ? scope.multiple : false;\n                scope.accept = angular.isDefined(scope.accept) ? scope.accept : '*/*';\n                scope.pattern = angular.isDefined(scope.pattern) ? scope.pattern : '*/*';\n                scope.fileName = angular.isDefined(scope.fileName) ? scope.fileName : '';\n                scope.minWidth = angular.isDefined(scope.minWidth) ? scope.minWidth : 0;\n                scope.minHeight = angular.isDefined(scope.minHeight) ? scope.minHeight : 0;\n                scope.fixOrientation = angular.isDefined(scope.fixOrientation) ? scope.fixOrientation : false;\n\n                scope.crop = angular.isDefined(scope.crop) ? scope.crop : true;\n\n                var crop_area_default = {\n                    auto: true,\n                    width: scope.minWidth,\n                    height: scope.minHeight,\n                    minWidth: scope.minWidth,\n                    minHeight: scope.minHeight,\n                    cropWidth: 0,\n                    cropHeight: 0,\n                    keepAspect: true,\n                    enforceCropAspect: false,\n                    touchRadius: 30,\n                    color: 'rgba(118, 118, 118, 0.8)',\n                    colorDrag: 'rgba(118, 118, 118, 0.8)',\n                    colorBg: 'rgba(200, 200, 200, 0.8)',\n                    colorCropBg: 'rgba(118, 118, 118, 0.8)'\n                };\n\n                scope.cropArea = angular.isObject(scope.cropArea) ? angular.extend(crop_area_default, scope.cropArea)  : crop_area_default;\n\n                // FUNCTIONS\n                scope.onChangeUploadLoading = function (newValue, oldValue) {\n                    scope.loading = newValue;\n                };\n\n                scope.onChangeUploadResult = function (newValue, oldValue) {\n\n                    if (newValue !== oldValue) {\n                        if (angular.isObject(rcMediaApi.upload.result) && angular.isDefined(rcMediaApi.upload.result.message)) {\n                            scope.addAlert('alert', rcMediaApi.upload.result.message);\n                        }\n                        else {\n                            scope.alerts = [];\n                        }\n                    }\n                };\n\n                scope.onChangeUploadFile = function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        $log.debug('onChangeUploadFile');\n                        scope.file = newValue;\n                    }\n                };\n\n                scope.onChangeUploadMultiple = function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        $log.debug('onChangeUploadMultiple');\n                        scope.multiple = newValue;\n                    }\n                };\n\n                scope.onChangeUploadCrop = function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        $log.debug('onChangeUploadCrop');\n                        scope.crop = newValue;\n                    }\n                };\n\n                scope.onChangeUploadProgress = function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        $log.debug('onChangeUploadProgress');\n                        scope.progress = newValue;\n                    }\n                };\n\n                scope.onChangeUploadCurrentState = function (newValue, oldValue) {\n                    $log.debug('onChangeUploadCurrentState');\n\n                    angular.extend(scope.cropArea, rcMediaApi.upload.cropArea);\n                    scope.currentState = newValue;\n                };\n\n                scope.uploadSelectFiles = function ($files) {\n                    scope.alerts = [];\n                    rcMediaApi.uploadSelectFiles($files);\n                };\n\n                scope.changeFiles = function ($files, $file, $newFiles, $duplicateFiles, $invalidFiles, $event) {\n                    $log.debug($invalidFiles);\n\n\n                    if ($invalidFiles.length > 0) {\n                        var err_text = rcMedia.getLocalizedText('UPLOAD_INVALID_FILE');\n\n                        angular.forEach($invalidFiles, function (file, file_key) {\n                            if (file_key > 0) {\n                                err_text += '\\r\\n';\n                            }\n                            var i = 0;\n                            angular.forEach(file.$errorMessages, function (value, key) {\n\n                                if (i > 0 ) {\n                                    err_text += ', ';\n                                }\n                                else {\n                                    err_text += ' ';\n                                }\n                                if (value === true) {\n                                    err_text += rcMedia.getLocalizedText('UPLOAD_INVALID_' + key);\n\n                                    switch (key) {\n                                        case 'minHeight':\n                                            err_text += ' ' + rcMediaApi.upload.minHeight + 'px';\n                                            break;\n                                        case 'minWidth':\n                                            err_text += ' ' + rcMediaApi.upload.minWidth + 'px';\n                                            break;\n                                        case 'pattern':\n                                            break;\n                                    }\n                                }\n                                i++;\n                            });\n                        });\n\n                        scope.addAlert('alert', err_text);\n                    }\n                    else {\n                        scope.uploadSelectFiles($files);\n                    }\n                };\n\n                scope.addAlert = function(type, msg) {\n                    scope.alerts.push({type: type, msg: msg});\n                };\n\n                scope.closeAlert = function(index) {\n                    scope.alerts.splice(index, 1);\n                };\n\n                // INIT\n                rcMediaApi.uploadElement = angular.element(elem);\n                rcMediaApi.initMediaUpload( {\n                    multiple : scope.multiple,\n                    accept   : scope.accept,\n                    pattern  : scope.pattern,\n                    fileName : scope.fileName,\n                    minWidth : scope.minWidth,\n                    minHeight: scope.minHeight,\n                    crop     : scope.crop,\n                    cropArea : scope.cropArea,\n                    file     : scope.file\n                } );\n\n                scope.rcMediaApi = rcMediaApi;\n\n                scope.$watch('rcMediaApi.upload.file',      scope.onChangeUploadFile);\n                scope.$watch('rcMediaApi.upload.multiple',  scope.onChangeUploadMultiple);\n                scope.$watch('rcMediaApi.upload.crop',      scope.onChangeUploadCrop);\n                scope.$watch('rcMediaApi.upload.progress',  scope.onChangeUploadProgress);\n                scope.$watch('rcMediaApi.upload.loading',   scope.onChangeUploadLoading);\n                scope.$watch('rcMediaApi.upload.result',    scope.onChangeUploadResult);\n                scope.$watch('rcMediaApi.upload.currentState', scope.onChangeUploadCurrentState);\n            }\n        };\n    }]);\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n    module.controller(\"rcMediaCtrl\", [\n        '$scope',\n        '$q',\n        '$window',\n        '$injector',\n        '$filter',\n        '$log',\n        '$timeout',\n        'RCMEDIA_UPLOAD_STATES',\n        'rcMediaService',\n        function ($scope, $q, $window, $injector, $filter, $log, $timeout, RCMEDIA_UPLOAD_STATES, rcMediaService) {\n\n        var rcMediaApi = this;\n\n        this.rcMediaElement = null;\n\n        /**\n         * Init Controller\n         */\n        this.init = function () {\n            $log.debug('rcMedia Init');\n\n            //Set default upload\n            this.upload = {\n                multiple: false,\n                accept: '*/*',\n                pattern: '*/*',\n                fileName: '',\n                minWidth: 0,\n                minHeight: 0,\n                fixOrientation: false,\n                crop: true,\n                cropArea: {\n                    auto: true\n                },\n                file: {},\n                loading: false,\n                result: null,\n                progress: 0,\n                currentState: '',\n                deferred: null,\n                uploadFile: null\n            };\n\n            this.search = '';\n\n            this.sourceUrl      = angular.isDefined($scope.sourceUrl) ? $scope.sourceUrl : '';\n            this.sourceId       = angular.isDefined($scope.sourceId) ? $scope.sourceId : 'id';\n            this.sourceUrlKey   = angular.isDefined($scope.sourceUrlKey) ? $scope.sourceUrlKey : 'source_url';\n            this.sourceTitle    = angular.isDefined($scope.sourceTitle) ? $scope.sourceTitle : 'title.rendered';\n\n            this.returnModelType  = angular.isDefined($scope.returnModelType) ? $scope.returnModelType : 'string';\n            this.returnModelKey   = angular.isDefined($scope.returnModelKey) ? $scope.returnModelKey : null;\n            this.returnModelPush   = angular.isDefined($scope.returnModelPush) ? $scope.returnModelPush : false;\n\n            this.accept         = angular.isDefined($scope.accept) ? $scope.accept : 'image/*';\n\n            this.sourcesLimitKey = angular.isDefined($scope.sourcesLimitKey) ? $scope.sourcesLimitKey : 'limit';\n            this.sourcesOffsetKey = angular.isDefined($scope.sourcesOffsetKey) ? $scope.sourcesOffsetKey : 'offset';\n            this.sourcesSearchKey = angular.isDefined($scope.sourcesSearchKey) ? $scope.sourcesSearchKey : 'search';\n            this.sourcesQuery = angular.isDefined($scope.sourcesQuery) ? $scope.$eval($scope.sourcesQuery) : {};\n            this.deleteQuery = angular.isDefined($scope.deleteQuery) ? $scope.$eval($scope.deleteQuery) : {};\n\n            this.sources        = angular.isDefined(this.sources) ? this.sources : [];\n            this.sourcesSelected = [];\n\n\n            if (angular.isUndefined(this.sourcesQuery[this.sourcesLimitKey])) {\n                this.sourcesQuery[this.sourcesLimitKey] = 10;\n            }\n\n            if (angular.isUndefined(this.sourcesQuery[this.sourcesOffsetKey])) {\n                this.sourcesQuery[this.sourcesOffsetKey] = 0;\n            }\n\n            if (angular.isUndefined(this.sourcesQuery[this.sourcesSearchKey])) {\n                this.sourcesQuery[this.sourcesSearchKey] = '';\n            }\n\n\n            this.addBindings();\n\n            $scope.onMediaReady({$rcMediaApi: this});\n        };\n\n        /**\n         * Function to execute when init Media Gallery.\n         */\n        this.initMediaGallery = function ( gallery, search ) {\n            $log.debug('initMediaGallery');\n\n            //Set default gallery\n            this.gallery = {\n                result: null,\n                loading: false,\n                loadMore: false,\n                multiple: false,\n                order: 'date'\n            };\n\n            if (angular.isObject(gallery)) {\n                angular.extend(this.gallery, gallery);\n            }\n\n            if (angular.isString(search) && search.length > 0) {\n                this.search = search;\n                this.searchSources();\n            }\n            else {\n                this.getSources(this.sourcesQuery);\n            }\n        };\n\n        /**\n        * Function to execute when init Media Search.\n        */\n        this.initMediaSearch = function ( value ) {\n            $log.debug('initMediaSearch');\n\n            if (angular.isString(value) && value.length > 0) {\n                this.search = value;\n                this.searchSources();\n            }\n        };\n\n\n        /**\n         * Function to execute when init Media Upload.\n         *\n         * @param upload\n         */\n        this.initMediaUpload = function ( upload ) {\n            $log.debug('initMediaUpload');\n\n            if (angular.isObject(upload)) {\n                angular.extend(this.upload, upload);\n            }\n\n\n            this.setUploadState(RCMEDIA_UPLOAD_STATES.SELECT_FILES);\n        };\n\n\n        /**\n         * Function return the source title by expression\n         *\n         * @param source\n         * @param expression\n         * @returns {*}\n         */\n        this.getSourceTitle = function( source ) {\n\n            var source_title_list = this.sourceTitle.split('.');\n            var find_source = source;\n\n            for(var i = 0; i < source_title_list.length - 1; i++) {\n                var elem = source_title_list[i];\n                if( !find_source[elem] ) {\n                    find_source[elem] = {};\n                }\n\n                find_source = find_source[elem];\n            }\n\n            var title = find_source[source_title_list[source_title_list.length - 1]];\n\n            if (title) {\n                return title.split('_').join(' ');\n            }\n\n            return '';\n        };\n\n\n        /**\n         * Set upload new state\n         *\n         * @param newState\n         * @returns {string|*}\n         */\n        this.setUploadState = function (newState) {\n            if (newState && newState !== this.upload.currentState) {\n                $scope.onUploadUpdateState({$state: newState});\n\n                this.upload.currentState = newState;\n            }\n\n            return this.upload.currentState;\n        };\n\n        /**\n         * Upload Select File.\n         *\n         * @param $files\n         */\n        this.uploadSelectFiles = function ($files) {\n\n            //Attention multiple file crop not supported.\n\n            if ( $files.length > 0 ) {\n                $log.debug('Upload selectFiles');\n                $log.debug($files);\n\n                try {\n                    var Upload = $injector.get('Upload');\n\n                    /* Get image file dimensions*/\n                    Upload.imageDimensions($files[0]).then(\n                        function(dimensions){\n                            if ( rcMediaApi.upload.multiple === false && rcMediaApi.upload.crop === true ) {\n\n                                if ( angular.isDefined(rcMediaApi.uploadElement) &&\n                                    angular.isDefined(rcMediaApi.upload.cropArea.auto) &&\n                                    rcMediaApi.upload.cropArea.auto === true\n                                ) {\n\n                                    var viewWidth = rcMediaApi.uploadElement[0].clientWidth;\n                                    var viewHeight = rcMediaApi.uploadElement[0].clientHeight;\n\n                                    if (!rcMediaApi.upload.cropArea.cropHeight) {\n                                        rcMediaApi.upload.cropArea.cropHeight = rcMediaApi.upload.minHeight;\n                                    }\n\n                                    if (!rcMediaApi.upload.cropArea.cropWidth) {\n                                        rcMediaApi.upload.cropArea.cropWidth = rcMediaApi.upload.minWidth;\n                                    }\n\n                                    rcMediaApi.upload.cropArea.width = viewWidth;\n                                    rcMediaApi.upload.cropArea.height = viewHeight;\n\n\n                                    var ratioH = dimensions.height / viewHeight;\n                                    var ratioW = dimensions.width / viewWidth;\n                                    var ratio;\n\n                                    if (ratioH >= ratioW) {\n                                        ratio = ratioH;\n                                    }\n                                    else {\n                                        ratio = ratioW;\n                                    }\n\n                                    rcMediaApi.upload.cropArea.minWidth = parseInt(rcMediaApi.upload.cropArea.cropWidth / ratio);\n                                    rcMediaApi.upload.cropArea.minHeight = parseInt(rcMediaApi.upload.cropArea.cropHeight / ratio);\n                                }\n\n                                $log.debug('change state to Crop');\n                                rcMediaApi.setUploadState(RCMEDIA_UPLOAD_STATES.CROP_IMAGE);\n                            }\n                            else {\n                                //Crop not enable\n                                rcMediaApi.uploadFile();\n                            }\n                        },\n                        function (error) {\n                            //Is not image file\n                            rcMediaApi.uploadFile();\n                        }\n                    );\n                }\n                catch(err) {\n                    $log.error(err);\n                }\n            }\n        };\n\n        /**\n         * Function to upload files.\n         *\n         * @param file\n         */\n        this.uploadFile = function () {\n            $log.debug('upload');\n\n            this.upload.deferred = $q.defer();\n\n            this.upload.loading = true;\n            this.upload.progress = 0;\n            this.setUploadState(RCMEDIA_UPLOAD_STATES.PROGRESS_FILES);\n\n            try {\n                var Upload = $injector.get('Upload');\n\n                if (angular.isUndefined(this.upload.file.destDataUrl) || !this.upload.file.destDataUrl) {\n                    this.upload.file.destDataUrl = this.upload.file.source.$ngfBlobUrl;\n                }\n                else {\n\n                    this.upload.file.source = Upload.dataUrltoBlob(this.upload.file.destDataUrl, this.upload.file.source.name);\n                }\n\n                //Rename File\n                if (this.upload.fileName.length > 0) {\n                    var ext = this.upload.file.source.$ngfName.slice((this.upload.file.source.$ngfName.lastIndexOf(\".\") - 1 >>> 0) + 2);\n                    this.upload.file.source.$ngfName = this.upload.fileName + '.' + ext;\n                }\n\n                this.upload.uploadFile = Upload.upload({\n                    url   : rcMediaService.getRestUrl(),\n                    data: {\n                        file: this.upload.file.source\n                    }\n                });\n\n                this.upload.uploadFile.then(\n                    function (response_success) {\n                        rcMediaApi.resetUploadFile();\n                        rcMediaApi.addSource(response_success.data);\n                        $scope.onUploadFile({$file: rcMediaApi.upload.file});\n\n                        rcMediaApi.setUploadState(RCMEDIA_UPLOAD_STATES.SELECT_FILES);\n\n                        rcMediaApi.upload.result = null;\n                        rcMediaApi.upload.loading = false;\n\n                        rcMediaApi.upload.deferred.resolve(response_success);\n                    },\n                    function (response_error) {\n                        $log.debug('error status: ' + response_error);\n                        rcMediaApi.resetUploadFile();\n                        rcMediaApi.setUploadState(RCMEDIA_UPLOAD_STATES.SELECT_FILES);\n\n                        rcMediaApi.upload.result = response_error.data;\n                        rcMediaApi.upload.loading = false;\n\n                        rcMediaApi.upload.deferred.reject(response_error);\n                    },\n                    function (evt) {\n                        $log.debug('Progress status: ' + evt);\n\n                        var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);\n                        rcMediaApi.upload.progress = progressPercentage;\n\n                        rcMediaApi.upload.deferred.notify(progressPercentage);\n                    }\n                );\n            }\n            catch(err) {\n                $log.error(err);\n\n                rcMediaApi.setUploadState(RCMEDIA_UPLOAD_STATES.SELECT_FILES);\n\n                rcMediaApi.upload.deferred.reject();\n            }\n\n\n            return this.upload.deferred.promise;\n        };\n\n        /**\n         * Cancell upload file\n         */\n        this.cancelUploadFile = function () {\n            this.upload.uploadFile.abort();\n        };\n\n        /**\n         * Function to reset upload file object.\n         *\n         * @returns {{srcFile: null, destDataUrl: string}}\n         */\n        this.resetUploadFile = function () {\n            this.upload.file = {\n                source: null,\n                destDataUrl: ''\n            };\n\n            this.setUploadState(RCMEDIA_UPLOAD_STATES.SELECT_FILES);\n\n            $scope.onResetUploadFile({$file: this.upload.file});\n\n            return this.upload.file;\n        };\n\n        /**\n         * Function to instantiate and check the sources selected.\n         *\n         * @param source\n         */\n        this.selectSource = function (source) {\n            $log.debug('selectSource');\n\n            if ( rcMediaApi.sourcesSelected.indexOf(source) === -1 ) {\n                if (this.gallery.multiple) {\n                    source.activeClass = true;\n                    this.sourcesSelected.push(source);\n                } else {\n                    angular.forEach(rcMediaApi.sources, function (value, key) {\n                        rcMediaApi.sources[key].activeClass = false;\n                    });\n                    source.activeClass = true;\n                    this.sourcesSelected = [];\n                    this.sourcesSelected.push(source);\n                }\n                $scope.onSelectSource({$source: source});\n            } else {\n                var index_source = rcMediaApi.sources.indexOf(source);\n\n                angular.forEach(rcMediaApi.sourcesSelected, function (value, key) {\n                    if (value === source) {\n                        if (index_source !== -1) {\n                            rcMediaApi.sources[index_source].activeClass = false;\n                        }\n                        rcMediaApi.sourcesSelected.splice(key, 1);\n                    }\n                });\n            }\n        };\n\n\n        /**\n         * Function to Deselect all selected source.\n         *\n         * @returns {{srcFile: null, destDataUrl: string}}\n         */\n        this.deselectSources = function () {\n            angular.forEach(rcMediaApi.sources, function (value, key) {\n                rcMediaApi.sources[key].activeClass = false;\n            });\n\n            rcMediaApi.sourcesSelected = [];\n        };\n\n\n        this.getSources = function ( sources_query ) {\n            $log.debug('getGallerySources');\n\n            this.gallery.loading = true;\n\n            var sources_deferred = rcMediaService.get(sources_query, true);\n\n            sources_deferred.then(\n                function (response_success) {\n                    if (response_success.length > 0) {\n                        angular.forEach(response_success, function (value, key) {\n                            rcMediaApi.addSource(value);\n                        });\n                    }\n\n                    rcMediaApi.gallery.loadMore = rcMediaApi.sources.length > 0 ? true : false;\n                    rcMediaApi.gallery.loading = false;\n                    rcMediaApi.gallery.result = null;\n                },\n                function (response_error) {\n                    rcMediaApi.sources = [];\n                    rcMediaApi.gallery.loadMore = rcMediaApi.sources.length > 0 ? true : false;\n                    rcMediaApi.gallery.loading = false;\n                    rcMediaApi.gallery.result = response_error.data;\n                }\n            );\n\n            return sources_deferred;\n        };\n\n        /**\n         * Function to instantiate delete the selected values.\n         */\n        this.deleteSources = function ()  {\n            $log.debug('deleteSources');\n\n            var all = [];\n\n            angular.forEach(this.sourcesSelected, function (source, key) {\n\n                all.push(rcMediaService.delete(source[rcMediaApi.sourceId], rcMediaApi.deleteQuery).then(\n                    function (response_success) {\n                        rcMediaApi.removeSource(source);\n                        $scope.onDeleteSources({$source: source} );\n                    },\n                    function (response_error) {\n\n                        //Delete not found remove in sources\n                        if (response_error.status === 404) {\n                            rcMediaApi.removeSource(source);\n                            $scope.onDeleteSources({$source: source} );\n                        }\n                    }\n                ));\n            });\n\n            this.gallery.loading = true;\n\n            var defer_all = $q.all(all);\n\n            defer_all.then(\n                function (response_success) {\n                    rcMediaApi.gallery.loading = false;\n                },\n                function (response_error) {\n                    rcMediaApi.gallery.loading = false;\n                }\n            );\n\n            return defer_all;\n        };\n\n\n        /**\n         * Remove item in sources and in selected sources\n         *\n         * @param source\n         */\n        this.removeSource = function ( source ) {\n\n            //Remove in source\n            var deleted_index = rcMediaApi.sources.map(function(o) { return o[rcMediaApi.sourceId]; }).indexOf(source[rcMediaApi.sourceId]);\n            if (deleted_index !== -1) {\n                rcMediaApi.sources.splice(deleted_index, 1);\n            }\n\n            //Remove in sourcesSelected\n            deleted_index = rcMediaApi.sourcesSelected.map(function(o) { return o[rcMediaApi.sourceId]; }).indexOf(source[rcMediaApi.sourceId]);\n            if (deleted_index !== -1) {\n                rcMediaApi.sourcesSelected.splice(deleted_index, 1);\n            }\n        };\n\n\n        /**\n         * Add item in sources\n         *\n         * @param source\n         */\n        this.addSource = function ( source ) {\n            source.tooltipTitle = rcMediaApi.getSourceTitle(source);\n            rcMediaApi.sources.push(angular.copy(source));\n        };\n\n\n        /**\n         * Function to instantiate model with the selected values.\n         */\n        this.saveSources = function () {\n            $log.debug('saveSources');\n\n            if (this.sourcesSelected.length > 0) {\n                var model = [];\n\n                if (this.returnModelPush === false) {\n                    $scope.modelPreview = [];\n                }\n\n                angular.forEach(rcMediaApi.sourcesSelected, function (value) {\n                    if (rcMediaApi.returnModelKey) {\n                        model.push(value[rcMediaApi.returnModelKey]);\n                    }\n                    else {\n                        model.push(value);\n                    }\n\n                    $scope.modelPreview.push(value);\n                });\n\n\n                switch (this.returnModelType) {\n                    case 'string':\n                        if (this.returnModelPush === true) {\n                            var new_model = $scope.model;\n                            if (new_model.length > 0) {\n                                new_model += ',';\n                            }\n                            model = new_model + model.toString();\n                        }\n                        $scope.model = model.toString();\n                        break;\n                    case 'array':\n                        if (this.returnModelPush === true) {\n                            model = $scope.model.concat(model);\n                        }\n                        $scope.model = model;\n                        break;\n                }\n\n                $scope.onSaveSources({$model: $scope.model});\n            }\n        };\n\n        /**\n         * Function to load more sources from DB.\n         */\n        this.loadMoreSources = function () {\n            $log.debug('loadMore');\n\n            this.sourcesQuery[this.sourcesOffsetKey] = this.sources.length;\n\n            this.gallery.loading = true;\n\n            var sources_deferred = rcMediaService.get(this.sourcesQuery);\n\n            sources_deferred.then(\n                function (response_success) {\n                    if (response_success.length > 0) {\n                        angular.forEach(response_success, function (value, key) {\n                            rcMediaApi.addSource(value);\n                        });\n                    }\n                    else {\n                        rcMediaApi.gallery.loadMore = false;\n                    }\n                    rcMediaApi.gallery.result = null;\n                    rcMediaApi.gallery.loading = false;\n\n                    $scope.onLoadMoreSources();\n                },\n                function (response_error) {\n                    rcMediaApi.gallery.result = response_error.data;\n                    rcMediaApi.gallery.loading = false;\n                }\n            );\n\n            return sources_deferred;\n        };\n\n        this.searchSources = function () {\n            $log.debug('searchSources');\n\n            this.sourcesQuery[this.sourcesSearchKey] = this.search;\n            this.sourcesQuery[this.sourcesOffsetKey] = 0;\n\n            this.gallery.loading = true;\n\n            var sources_deferred = rcMediaService.get(this.sourcesQuery, true);\n\n            sources_deferred.then(\n                function (response_success) {\n                    if (response_success.length > 0) {\n                        rcMediaApi.sources = [];\n                        angular.forEach(response_success, function (value, key) {\n                            rcMediaApi.addSource(value);\n                        });\n                    }\n                    else {\n                        rcMediaApi.sources = [];\n                    }\n\n                    rcMediaApi.gallery.loadMore = rcMediaApi.sources.length > 0 ? true : false;\n                    rcMediaApi.gallery.result = null;\n                    rcMediaApi.gallery.loading = false;\n\n                    $scope.onSearchSources({$search: rcMediaApi.search});\n                },\n                function (response_error) {\n                    rcMediaApi.sources = [];\n                    rcMediaApi.gallery.loadMore = false;\n                    rcMediaApi.gallery.result = response_error.data;\n                    rcMediaApi.gallery.loading = false;\n                }\n            );\n\n            return sources_deferred;\n        };\n\n        /**\n         *  Force resize event for angular tiny scrollbar after loading hide\n         */\n        this.bindResize = function() {\n            $timeout(function() {\n                $window.dispatchEvent(new Event(\"resize\"));\n            }, 50);\n        };\n\n        this.addBindings = function () {\n            $log.debug('addBindings');\n        };\n\n\n        //Init\n        this.init();\n    }]);\n\n})(angular);\n","(function(angular){\n    'use strict';\n\n    // Load module rc-media\n    var module = angular.module('rcMedia');\n\n    //Enable cancellable resource\n    module.config(function($resourceProvider) {\n        $resourceProvider.defaults.cancellable = true;\n    });\n\n    module.provider('rcMedia', [ function rcMediaProvider() {\n\n        this.rest = {\n            url: '',\n            path: '/wp-json/wp/v2/media'\n        };\n\n        this.locale = null;\n\n        // default localized text. cannot be modified.\n        this.defaultText = {\n            'en-us': {\n                TITLE_GALLERY       : 'Gallery',\n                TITLE_UPLOAD        : 'Upload files',\n                TITLE_DRAG_FILE     : 'Drag files to upload',\n                SUB_TITLE_DRAG_FILE : 'or',\n                BTN_CANCEL          : 'Cancel',\n                BTN_SAVE            : 'Save',\n                BTN_DELETE_FILE     : 'Delete file',\n                BTN_DELETE_FILES    : 'Delete files',\n                BTN_DESELECT_ALL    : 'Deselect all',\n                BTN_SELECT_FILE     : 'Select file',\n                BTN_SELECT_FILES    : 'Select files',\n                BTN_SHOW_MORE       : 'Show More',\n                BTN_BACK_GALLERY    : 'Back to gallery',\n                BTN_UPLOAD_FILE     : 'Upload file',\n                BTN_UPLOAD_FILES    : 'Upload files',\n                BTN_BROWSE_FILE     : 'Browse a file',\n                UPLOAD_INVALID_FILE : 'Your file is not valid.',\n                UPLOAD_INVALID_minWidth : 'Minimum width',\n                UPLOAD_INVALID_minHeight: 'Minimum height',\n                UPLOAD_INVALID_pattern  : 'File type error'\n            },\n            'fr-FR': {\n                TITLE_GALLERY       : 'Gallerie',\n                TITLE_UPLOAD        : 'Télécharger un fichier',\n                TITLE_DRAG_FILE     : 'Glisser le fichier ici',\n                SUB_TITLE_DRAG_FILE : 'ou',\n                BTN_CANCEL          : 'Annuler',\n                BTN_SAVE            : 'Sauver',\n                BTN_DELETE_FILE     : 'Supprimer le fichier',\n                BTN_DELETE_FILES    : 'Supprimer les fichiers',\n                BTN_DESELECT_ALL    : 'Déselectioner tous',\n                BTN_SELECT_FILE     : 'Selectioner le fichier',\n                BTN_SELECT_FILES    : 'Selectioner les fichiers',\n                BTN_SHOW_MORE       : 'Voir plus',\n                BTN_BACK_GALLERY    : 'Revenir à la gallerie',\n                BTN_UPLOAD_FILE     : 'Télécharger le fichier',\n                BTN_UPLOAD_FILES    : 'Télécharger les fichiers',\n                BTN_BROWSE_FILE     : 'Choisir un fichier',\n                UPLOAD_INVALID_FILE : 'Votre fichier n\\'est pas valide.',\n                UPLOAD_INVALID_minWidth : 'Largeur minimum',\n                UPLOAD_INVALID_minHeight: 'Hauteur minimum',\n                UPLOAD_INVALID_pattern  : 'Type de fichier erroné'\n            }\n        };\n\n        // localized text which actually being used.\n        this.interfaceText = angular.copy(this.defaultText);\n\n\n\n        this.$get = [ '$http', '$locale', function( $http, $locale ) {\n            var rest = this.rest;\n            var localizedText;\n\n            //Enable Cors\n            $http.defaults.useXDomain = true;\n            $http.defaults.headers.common['Access-Control-Allow-Origin']  = '*';\n\n            // Disable IE ajax request caching\n            $http.defaults.headers.common['If-Modified-Since']  = '0';\n            //Disable caching\n            $http.defaults.headers.common['cache-control']      = 'private, max-age=0, no-cache';\n\n            //Translation\n            if(this.locale) {\n                localizedText = this.interfaceText[this.locale];\n            } else {\n                localizedText = this.interfaceText[$locale.id];\n            }\n\n            if(!localizedText) {\n                localizedText = this.defaultText['en-us'];\n            }\n\n            return {\n                getRest: function() {\n                    return rest;\n                },\n                getLocalizedText: function ( item ) {\n\n                    if (item) {\n                        var text = localizedText[item];\n\n                        return (text) ? text : '';\n                    }\n\n                    return localizedText;\n                }\n            };\n        }];\n\n        /**\n         * Merge with default localized text.\n         * @param localeId a string formatted as languageId-countryId\n         * @param obj localized text object.\n         */\n        this.setLocalizedText = function(localeId, obj) {\n            if(!localeId) {\n                throw new Error('localeId must be a string formatted as languageId-countryId');\n            }\n            if(!this.interfaceText[localeId]) {\n                this.interfaceText[localeId] = {};\n            }\n            this.interfaceText[localeId] = angular.extend(this.interfaceText[localeId], obj);\n        };\n\n        /**\n         * Force to use a special locale id. if localeId is null. reset to user-agent locale.\n         * @param localeId a string formatted as languageId-countryId\n         */\n        this.useLocale = function(localeId) {\n            this.locale = localeId;\n        };\n\n        this.setRest = function(rest) {\n            this.rest = rest;\n        };\n\n    }]);\n\n\n    //Media Resource\n    module.factory( 'rcMediaResource', [ '$resource', 'rcMedia', function ( $resource, rcMedia ) {\n\n        var rest_url = rcMedia.getRest().url + rcMedia.getRest().path;\n\n        var resource = {\n            Media: $resource(rest_url + '/:mediaId',\n                {mediaId: '@media_id'},\n                {get: {\n                    method: 'GET',\n                    isArray: false,\n                    cache: false\n                }},\n                {query: {\n                    method: 'GET',\n                    params:{},\n                    isArray: true,\n                    cache: false,\n                    cancellable: true\n                }}\n            )\n        };\n\n        return resource;\n\n    }]);\n\n    //Media Service Abstraction\n    module.factory('rcMediaService', ['$log', '$q', 'rcMedia', 'rcMediaResource', function ( $log, $q, rcMedia, rcMediaResource ) {\n\n        var service = {\n\n            getRestUrl: function () {\n                return rcMedia.getRest().url + rcMedia.getRest().path;\n            },\n\n            get: function( sources_query, cancel ){\n\n                //Cancel last request if param true\n                if (cancel === true && this.request !== undefined && angular.isFunction(this.request.$cancelRequest)) {\n\n                    this.request.$cancelRequest();\n                }\n\n                if ( angular.isNumber(sources_query) ) {\n                    sources_query = {mediaId: sources_query};\n\n                    this.request = rcMediaResource.Media.get( sources_query );\n                }\n                else {\n                    if ( !angular.isObject(sources_query) ) {\n                        sources_query = {};\n                    }\n\n                    this.request = rcMediaResource.Media.query( sources_query );\n                }\n\n                return this.request.$promise;\n            },\n\n            delete: function ( source_id, delete_query ) {\n\n                if (angular.isUndefined(delete_query)) {\n                    delete_query = {};\n                }\n\n                angular.extend(delete_query, { mediaId: source_id } );\n\n                return rcMediaResource.Media.delete( delete_query ).$promise;\n            }\n\n        };\n\n        return service;\n    }]);\n\n})(angular);\n","angular.module('rcMedia').run(['$templateCache', function($templateCache) {$templateCache.put('rc-media-dialog-zf.tpl.html','<div class=\"rc-media\" rc-media\\n     rcm-source-url=\"{{rcDialogApi.data.sourceUrl}}\"\\n     rcm-source-url-key=\"{{rcDialogApi.data.sourceUrlKey}}\"\\n     rcm-source-id=\"{{rcDialogApi.data.sourceId}}\"\\n     rcm-source-title=\"{{rcDialogApi.data.sourceTitle}}\"\\n     data-ng-model=\"rcDialogApi.data.sources\"\\n     data-ng-model-preview=\"rcDialogApi.data.sourcesPreview\"\\n     rcm-return-model-type=\"{{rcDialogApi.data.returnModelType}}\"\\n     rcm-return-model-key=\"{{rcDialogApi.data.returnModelKey}}\"\\n     rcm-return-model-push=\"rcDialogApi.data.returnModelPush\"\\n     rcm-delete-query=\"{{rcDialogApi.data.deleteQuery}}\"\\n     rcm-sources-query=\"{{rcDialogApi.data.sourcesQuery}}\"\\n     rcm-sources-offset-key=\"{{rcDialogApi.data.sourcesOffsetKey}}\"\\n     rcm-sources-limit-key=\"{{rcDialogApi.data.sourcesLimitKey}}\"\\n     rcm-sources-search-key=\"{{rcDialogApi.data.sourcesSearchKey}}\"\\n>\\n<div class=\"dialog-header\">\\n    <div class=\"gallery-view\" data-ng-show=\"!selectedView\">\\n        <h3 class=\"float-left dialog-title\"><rcm-translate>TITLE_GALLERY</rcm-translate></h3>\\n        <button class=\"button secondary hollow float-right dialog-close\" type=\"button\" data-ng-click=\"rcDialogApi.closeDialog()\" aria-label=\"Close reveal\" >\\n            <span aria-hidden=\"true\">&times;</span>\\n        </button>\\n        <button class=\"button primary hollow float-right upload\" type=\"button\" data-ng-show=\"!selectedView\" data-ng-click=\"selectedView=\\'fileUpload\\'\" >\\n            <svg width=\"25\" height=\"25\" version=\"1.1\" id=\"rcm_upload_svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\\n                   x=\"0px\" y=\"0px\" viewBox=\"0 0 23 20.5\" style=\"enable-background:new 0 0 23 20.5;\" xml:space=\"preserve\"\\n              >\\n                <g id=\"rcm_upload_svg_arrow\">\\n                  <line id=\"rcm_upload_svg_line\" class=\"st0\" x1=\"11.5\" y1=\"20.5\" x2=\"11.5\" y2=\"7.5\"/>\\n                  <polyline id=\"rcm_upload_svg_point\" class=\"st1\" points=\"8.5,10.5 11.5,7.5 14.5,10.5 \\t\"/>\\n                </g>\\n                <path\\n                  id=\"rcm_upload_svg_cloud\"\\n                  class=\"st1\"\\n                  d=\"M15.5,15.5h3c2.2,0,4-1.8,4-4c0-2.2-1.8-4-4-4c-0.3-3.9-3.5-7-7.5-7c-4,0-7.3,3.2-7.5,7.1c-1.7,0.4-3,2-3,3.9c0,2.2,1.8,4,4,4h3\"\\n                />\\n            </svg>\\n            <rcm-translate>BTN_UPLOAD_FILE</rcm-translate>\\n        </button>\\n    </div>\\n\\n    <div class=\"upload-view\" data-ng-show=\"selectedView==\\'fileUpload\\'\">\\n        <h3 class=\"float-left dialog-title\" ><rcm-translate>TITLE_UPLOAD</rcm-translate></h3>\\n        <button class=\"button secondary hollow float-right dialog-close\" type=\"button\" data-ng-click=\"rcDialogApi.closeDialog()\" aria-label=\"Close reveal\" >\\n            <span aria-hidden=\"true\">&times;</span>\\n        </button>\\n    </div>\\n</div>\\n<div class=\"dialog-body\">\\n\\n    <!-- Directive rc-media-upload -->\\n    <div class=\"upload-view\" data-ng-if=\"selectedView==\\'fileUpload\\'\"\\n         rcm-upload\\n         rcm-template-url=\"rc-media-upload-zf.tpl.html\"\\n         rcm-multiple=\"rcDialogApi.data.upload.multiple\"\\n         rcm-accept=\"\\'{{rcDialogApi.data.upload.accept}}\\'\"\\n         rcm-pattern=\"\\'{{rcDialogApi.data.upload.pattern}}\\'\"\\n         rcm-file-name=\"{{rcDialogApi.data.upload.fileName}}\"\\n         rcm-min-width=\"rcDialogApi.data.upload.minWidth\"\\n         rcm-min-height=\"rcDialogApi.data.upload.minHeight\"\\n         rcm-fix-orientation=\"rcDialogApi.data.upload.fixOrientation\"\\n         rcm-crop=\"rcDialogApi.data.upload.crop\"\\n         rcm-crop-area=\"rcDialogApi.data.upload.cropArea\"\\n         rcm-load-icon=\"{{rcDialogApi.data.upload.loadIcon}}\"\\n    ></div>\\n\\n    <div class=\"gallery-view\" data-ng-show=\"!selectedView\">\\n        <!-- Directive rc-media-gallery -->\\n        <div rcm-gallery\\n             rcm-template-url=\"rc-media-gallery-zf.tpl.html\"\\n             rcm-order=\"{{rcDialogApi.data.gallery.order}}\"\\n             rcm-multiple=\"rcDialogApi.data.gallery.multiple\"\\n             rcm-selected-sources=\"rcDialogApi.data.gallery.selectedSources\"\\n             rcm-search-value=\"{{rcDialogApi.data.gallery.searchValue}}\"\\n             rcm-load-icon=\"{{rcDialogApi.data.gallery.loadIcon}}\"\\n        ></div>\\n    </div>\\n</div>\\n<div class=\"dialog-footer\" data-ng-show=\"selectedView || rcDialogApi.data.gallery.selectedSources.length\">\\n    <div class=\"upload-view\" data-ng-if=\"selectedView==\\'fileUpload\\'\" rcm-upload-controls\\n         rcm-template-url=\"rc-media-upload-controls-zf.tpl.html\"\\n         data-ng-model=\"rcDialogApi.data.uploadFile\"\\n         rcm-save-click=\"selectedView=false\"\\n         rcm-cancel-click=\"selectedView=false\"\\n    ></div>\\n\\n    <div class=\"gallery-view\" data-ng-if=\"!selectedView\" rcm-gallery-controls\\n         rcm-template-url=\"rc-media-gallery-controls-zf.tpl.html\"\\n         rcm-save-click=\"rcDialogApi.confirmDialog()\"\\n    ></div>\\n</div>\\n</div>');\n$templateCache.put('rc-media-gallery-controls-zf.tpl.html','<button class=\"button alert hollow float-left delete-file\" data-ng-click=\"deleteSources()\" data-ng-disabled=\"loading\"><rcm-translate>BTN_DELETE_FILE</rcm-translate></button>\\n<button class=\"button secondary hollow float-left deselect-all\" data-ng-click=\"deselectSources()\" data-ng-disabled=\"loading\"><rcm-translate>BTN_DESELECT_ALL</rcm-translate></button>\\n<button class=\"button primary float-right select-file\" data-ng-click=\"saveSources()\" data-ng-disabled=\"loading\"><rcm-translate>BTN_SELECT_FILE</rcm-translate></button>');\n$templateCache.put('rc-media-gallery-zf.tpl.html','<div class=\"rcm-gallery\" >\\n\\n    <alert class=\"message\" data-ng-repeat=\"alert in alerts\" type=\"alert.type\" close=\"closeAlert($index)\">{{alert.msg}}</alert>\\n\\n    <div data-ng-hide=\"!loading\" class=\"loading-overlay\">\\n        <webicon  class=\"loading-icon\" icon=\"{{loadIcon}}\"></webicon>\\n    </div>\\n\\n    <div class=\"gallery-overlay\" scrollbar=\"{autoUpdate: true}\">\\n\\n        <div data-ng-repeat=\"source in sources | orderBy:order:true\"\\n             class=\"thumbnail-block\"\\n             data-ng-class=\"{\\'selected\\': source.activeClass}\"\\n             data-ng-click=\"selectSource(source)\">\\n            <div class=\"thumbnail\"\\n                 data-ng-style=\"{\\'background-image\\':\\'url({{rcMediaApi.sourceUrl + source[rcMediaApi.sourceUrlKey]}})\\', \\'background-repeat\\': \\'no-repeat\\', \\'background-position\\': \\'center center\\', \\'background-size\\': \\'contain\\'}\"\\n                 tooltip-placement=\"bottom\"\\n                 tooltip-html-unsafe=\"{{source.tooltipTitle}}\"\\n            ></div>\\n        </div>\\n\\n        <button type=\"button\" class=\"button secondary float-center load-more\" data-ng-show=\"loadMore\" data-ng-click=\"loadMoreSources()\" data-ng-disabled=\"loading\">\\n            <i class=\"fa fa-plus\"></i>\\n            <rcm-translate>BTN_SHOW_MORE</rcm-translate>\\n        </button>\\n\\n    </div>\\n</div>');\n$templateCache.put('rc-media-upload-controls-zf.tpl.html','<div data-ng-show=\"rcMediaApi.upload.currentState==\\'selectFiles\\'\">\\n    <button class=\"button secondary hollow float-left\" data-ng-click=\"resetUploadFile(true)\"><rcm-translate>BTN_BACK_GALLERY</rcm-translate></button>\\n</div>\\n\\n<div data-ng-show=\"rcMediaApi.upload.currentState==\\'cropImage\\'\">\\n    <button class=\"button primary float-right\" data-ng-click=\"uploadFile()\"><rcm-translate>BTN_SAVE</rcm-translate></button>\\n    <button class=\"button hollow secondary float-right\" data-ng-click=\"resetUploadFile()\"><rcm-translate>BTN_CANCEL</rcm-translate></button>\\n</div>\\n\\n<div data-ng-show=\"rcMediaApi.upload.currentState==\\'progressFiles\\'\">\\n    <button class=\"button secondary float-right\" data-ng-click=\"cancelUploadFile()\"><rcm-translate>BTN_CANCEL</rcm-translate></button>\\n</div>\\n');\n$templateCache.put('rc-media-upload-zf.tpl.html','<div class=\"rcm-upload\">\\n\\n  <alert class=\"message\" data-ng-repeat=\"alert in alerts\" type=\"alert.type\" close=\"closeAlert($index)\">{{alert.msg}}</alert>\\n\\n  <div data-ng-show=\"currentState==\\'selectFiles\\'\" class=\"rcm-dropzone\"\\n       ngf-drop\\n       data-ng-model=\"file.source\"\\n       ngf-change=\"changeFiles($files, $file, $newFiles, $duplicateFiles, $invalidFiles, $event)\"\\n       ngf-drag-over-class=\"dragover\"\\n       ngf-multiple=\"multiple\"\\n       ngf-accept=\"{{accept}}\"\\n       ngf-pattern=\"{{pattern}}\"\\n       ngf-min-width=\"minWidth\"\\n       ngf-min-height=\"minHeight\"\\n       ngf-fix-orientation=\"fixOrientation\"\\n  >\\n\\n    <div class=\"select-file\" >\\n      <svg width=\"150\" height=\"150\" version=\"1.1\" id=\"rcm_upload_svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\\n           x=\"0px\" y=\"0px\" viewBox=\"0 0 23 20.5\" style=\"enable-background:new 0 0 23 20.5;\" xml:space=\"preserve\"\\n      >\\n        <g id=\"rcm_upload_svg_arrow\">\\n\\t      <line id=\"rcm_upload_svg_line\" class=\"st0\" x1=\"11.5\" y1=\"20.5\" x2=\"11.5\" y2=\"7.5\"/>\\n\\t      <polyline id=\"rcm_upload_svg_point\" class=\"st1\" points=\"8.5,10.5 11.5,7.5 14.5,10.5 \\t\"/>\\n        </g>\\n        <path\\n          id=\"rcm_upload_svg_cloud\"\\n          class=\"st1\"\\n          d=\"M15.5,15.5h3c2.2,0,4-1.8,4-4c0-2.2-1.8-4-4-4c-0.3-3.9-3.5-7-7.5-7c-4,0-7.3,3.2-7.5,7.1c-1.7,0.4-3,2-3,3.9c0,2.2,1.8,4,4,4h3\"\\n        />\\n      </svg>\\n\\n      <h3><rcm-translate>TITLE_DRAG_FILE</rcm-translate></h3>\\n      <p class=\"lead\"><rcm-translate>SUB_TITLE_DRAG_FILE</rcm-translate></p>\\n\\n      <button ngf-select\\n              data-ng-model=\"file.source\"\\n              ngf-change=\"changeFiles($files, $file, $newFiles, $duplicateFiles, $invalidFiles, $event)\"\\n              ngf-multiple=\"multiple\"\\n              ngf-accept=\"{{accept}}\"\\n              ngf-pattern=\"{{pattern}}\"\\n              ngf-min-width=\"minWidth\"\\n              ngf-min-height=\"minHeight\"\\n              type=\"button\"\\n              class=\"button primary large\"\\n      >\\n        <rcm-translate>BTN_BROWSE_FILE</rcm-translate>\\n      </button>\\n    </div>\\n  </div>\\n\\n  <div class=\"crop-area\" data-ng-if=\"currentState==\\'cropImage\\'\">\\n    <div>\\n      <canvas\\n              height=\"{{cropArea.height}}px\"\\n              width=\"{{cropArea.width}}px\"\\n              min-width=\"cropArea.minWidth\"\\n              min-height=\"cropArea.minHeight\"\\n              id=\"canvas\"\\n              img-cropper\\n              img-src=\"{imageData: (file.source | ngfDataUrl), fileType: file.source.type}\"\\n              img-dst=\"file.destDataUrl\"\\n              crop-width=\"cropArea.cropWidth\"\\n              crop-height=\"cropArea.cropHeight\"\\n              keep-aspect=\"cropArea.keepAspect\"\\n              enforce-crop-aspect=\"cropArea.enforceCropAspect\"\\n              touch-radius=\"cropArea.touchRadius\"\\n              color=\"{{cropArea.color}}\"\\n              color-drag=\"{{cropArea.colorDrag}}\"\\n              color-bg=\"{{cropArea.colorBg}}\"\\n              color-crop-bg=\"{{cropArea.colorCropBg}}\"\\n      >\\n      </canvas>\\n    </div>\\n  </div>\\n\\n  <div data-ng-show=\"currentState==\\'progressFiles\\'\" class=\"preview-file\" >\\n\\n    <div class=\"loading-overlay\">\\n      <webicon  class=\"loading-icon\" icon=\"{{loadIcon}}\"></webicon>\\n    </div>\\n\\n    <img class=\"float-center\" width=\"200\" height=\"200\" data-ng-src=\"{{file.destDataUrl}}\" alt=\"\">\\n  </div>\\n</div>');\n$templateCache.put('rc-media-search-zf.tpl.html','<div class=\"rcm-search input-group\">\\n  <span class=\"input-group-addon\"><i class=\"glyphicon glyphicon-search\"></i></span>\\n  <input type=\"text\" class=\"form-control\" data-ng-model=\"search\" placeholder=\"Search ...\">\\n</div>');}]);"],"sourceRoot":"dist"}