{"version":3,"sources":["rc-media.js","rc-media-constants.js","rc-media-gallery-controls.js","rc-media-gallery.js","rc-media-search.js","rc-media-translate.js","rc-media-upload-controls.js","rc-media-upload.js","rc-media-controller.js","rc-media-services.js","tpls-media.js"],"names":["angular","module","constant","SELECT_FILES","CROP_IMAGE","PROGRESS_FILES","directive","$log","$parse","$compile","restrict","require","scope","deleteClick","saveClick","templateUrl","elem","attrs","rcmTemplateUrl","link","rcMediaApi","loading","deleteSources","then","response_success","bindResize","response_error","$parent","$applyAsync","deselectSources","saveSources","galleryControlsElement","element","$window","$timeout","sources","seletedSources","order","multiple","search","loadIcon","alerts","loadMore","isDefined","onChangeGalleryLoading","newValue","oldValue","gallery","isObject","result","message","push","type","msg","onChangeSources","debug","onChangeSourcesSelected","selectSource","source","index","sourcesSelected","loadMoreSources","length","closeAlert","splice","galleryElement","initMediaGallery","$watch","value","onSearch","newVal","oldVal","searchSources","searchElement","initMediaSearch","rcMedia","ref","html","text","getLocalizedText","replace","file","cancelClick","uploadFile","upload","evt","cancelUploadFile","resetUploadFile","back","uploadControlsElement","accept","pattern","minWidth","minHeight","crop","cropArea","progress","currentState","crop_area_default","auto","width","height","minHeaight","cropWidth","cropHeight","keepAspect","touchRadius","color","colorDrag","colorBg","colorCropBg","extend","onChangeUploadLoading","onChangeUploadResult","onChangeUploadFile","onChangeUploadMultiple","onChangeUploadCrop","onChangeUploadProgress","onChangeUploadCurrentState","uploadSelectFiles","$files","uploadElement","initMediaUpload","onChangeUploadCropArea","model","modelPreview","sourceUrl","returnModelType","returnModelKey","returnModelPush","sourceId","sourceUrlKey","sourceTitle","sourcesOffsetKey","sourcesLimitKey","sourcesSearchKey","deleteQuery","sourcesQuery","onMediaReady","onUploadUpdateState","onUploadFile","onResetUploadFile","onSaveSources","onDeleteSources","onSelectSource","onSearchSources","onLoadMoreSources","controller","controllerAs","post","attr","rcMediaElement","$scope","$q","$injector","$filter","RCMEDIA_UPLOAD_STATES","rcMediaService","this","init","deferred","$eval","isUndefined","addBindings","$rcMediaApi","isString","getSources","setUploadState","getSourceTitle","source_title_list","split","find_source","i","title","newState","$state","clientWidth","clientHeight","defer","Upload","get","destDataUrl","$ngfBlobUrl","dataUrltoBlob","name","url","getRestUrl","data","addSource","$file","resolve","reject","progressPercentage","parseInt","loaded","total","notify","err","error","promise","abort","indexOf","activeClass","forEach","key","$source","index_source","sources_query","sources_deferred","copy","all","delete","removeSource","status","defer_all","deleted_index","map","o","new_model","toString","concat","$model","$search","dispatchEvent","Event","config","$resourceProvider","defaults","cancellable","provider","rcMediaProvider","rest","path","locale","defaultText","en-us","TITLE_GALLERY","TITLE_UPLOAD","TITLE_DRAG_FILE","SUB_TITLE_DRAG_FILE","BTN_CANCEL","BTN_SAVE","BTN_DELETE_FILE","BTN_DELETE_FILES","BTN_DESELECT_ALL","BTN_SELECT_FILE","BTN_SELECT_FILES","BTN_SHOW_MORE","BTN_BACK_GALLERY","BTN_UPLOAD_FILE","BTN_UPLOAD_FILES","BTN_BROWSE_FILE","fr-FR","interfaceText","$get","$http","$locale","localizedText","useXDomain","headers","common","id","getRest","item","setLocalizedText","localeId","obj","Error","useLocale","setRest","factory","$resource","rest_url","resource","Media","mediaId","method","isArray","cache","query","params","rcMediaResource","service","cancel","request","undefined","isFunction","$cancelRequest","isNumber","$promise","source_id","delete_query","run","$templateCache","put"],"mappings":"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","file":"rc-media.js","sourcesContent":["(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n\n    module.directive(\"rcMedia\", [ function () {\n        return {\n            restrict: \"EA\",\n            require   : ['?ngModel'],\n            scope     : {\n                model        : '=ngModel',\n                modelPreview : '=ngModelPreview',\n                sourceUrl    : '@rcmSourceUrl',\n                returnModelType : '@rcmReturnModelType',\n                returnModelKey  : '@rcmReturnModelKey',\n                returnModelPush : '=?rcmReturnModelPush',\n                sourceId     : '@rcmSourceId',\n                sourceUrlKey : '@rcmSourceUrlKey',\n                sourceTitle  : '@rcmSourceTitle',\n                sourcesOffsetKey: '@rcmSourcesOffsetKey',\n                sourcesLimitKey : '@rcmSourcesLimitKey',\n                sourcesSearchKey: '@rcmSourcesSearchKey',\n                deleteQuery     : '@rcmDeleteQuery',\n                sourcesQuery    : '@rcmSourcesQuery',\n                onMediaReady       : '&rcmOnMediaReady',\n                onUploadUpdateState: \"&rcmOnUploadUpdateState\",\n                onUploadFile       : '&rcmOnUploadFile',\n                onResetUploadFile  : '&rcmOnResetUploadFile',\n                onSaveSources      : '&rcmOnSaveSources',\n                onDeleteSources    : '&rcmOnDeleteSources',\n                onSelectSource     : '&rcmOnSelectSource',\n                onSearchSources    : '&rcmOnSearchSources',\n                onLoadMoreSources  : '&rcmOnLoadMoreSources'\n            },\n            controller: \"rcMediaCtrl\",\n            controllerAs: \"rcMediaApi\",\n            link: {\n                post: function (scope, elem, attr, controller) {\n                    scope.rcMediaApi.rcMediaElement = angular.element(elem);\n                }\n            }\n        };\n    }]);\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n\n    var module = angular.module('rcMedia');\n\n    module.constant(\"RCMEDIA_UPLOAD_STATES\", {\n        SELECT_FILES  : \"selectFiles\",\n        CROP_IMAGE   : \"cropImage\",\n        PROGRESS_FILES: \"progressFiles\"\n    });\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n\n    module.directive(\"rcmGalleryControls\", [ '$log', '$parse', '$compile', function ($log, $parse, $compile) {\n        return {\n            restrict  : 'EA',\n            require: \"^rcMedia\",\n            scope     : {\n                deleteClick: '@?rcmDeleteClick',\n                saveClick: '@?rcmSaveClick'\n            },\n            templateUrl: function (elem, attrs) {\n                return attrs.rcmTemplateUrl || 'rc-media-gallery-controls.tpl.html';\n            },\n            link: function (scope, elem, attrs, rcMediaApi) {\n\n                scope.loading = false;\n\n                scope.deleteSources = function () {\n                    scope.loading = true;\n\n                    rcMediaApi.deleteSources().then(\n                        function (response_success) {\n                            scope.loading = false;\n                            rcMediaApi.bindResize();\n                        },\n                        function (response_error) {\n                            scope.loading = false;\n                            rcMediaApi.bindResize();\n                        }\n                    );\n\n                    scope.$parent.$parent.$applyAsync($parse(scope.deleteClick));\n                };\n\n                scope.deselectSources = function () {\n                    rcMediaApi.deselectSources();\n                };\n\n                scope.saveSources = function () {\n                    rcMediaApi.saveSources();\n\n                    scope.$parent.$parent.$applyAsync($parse(scope.saveClick));\n                };\n\n\n                // INIT\n                rcMediaApi.galleryControlsElement = angular.element(elem);\n                scope.rcMediaApi = rcMediaApi;\n            }\n        };\n    }]);\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n    module.directive(\"rcmGallery\", ['$window', '$timeout', '$log', function ($window, $timeout, $log) {\n        return {\n            restrict  : 'EA',\n            require: \"^rcMedia\",\n            scope     : {\n                sources  : '=?ngModel',\n                seletedSources  : '=?rcmSelectedSources',\n                order   : '@?rcmOrder',\n                multiple: '=?rcmMultiple',\n                search  : '@?rcmSearchValue',\n                loadIcon : '@?rcmLoadIcon'\n            },\n            templateUrl: function (elem, attrs) {\n                return attrs.rcmTemplateUrl  || 'rc-media-gallery.tpl.html';\n            },\n            link: function (scope, elem, attrs, rcMediaApi) {\n\n                scope.alerts = [];\n                scope.loading = false;\n                scope.loadMore = false;\n\n                scope.sources = angular.isDefined(scope.sources) ? scope.sources : [];\n                scope.seletedSources = angular.isDefined(scope.seletedSources) ? scope.seletedSources : [];\n                scope.order = angular.isDefined(scope.order) ? scope.order : 'date';\n                scope.multiple = angular.isDefined(scope.multiple) ? scope.multiple : false;\n                scope.search = angular.isDefined(scope.search) ? scope.search : '';\n\n                // FUNCTIONS\n                scope.onChangeGalleryLoading = function (newValue, oldValue) {\n\n                    if (newValue === false) {\n                        scope.loadMore = rcMediaApi.gallery.loadMore;\n\n                        if (angular.isObject(rcMediaApi.gallery.result) && angular.isDefined(rcMediaApi.gallery.result.message)) {\n                            scope.alerts.push({type: 'alert', msg: rcMediaApi.gallery.result.message});\n                        }\n                    }\n                    else {\n                        scope.alerts = [];\n                    }\n\n                    scope.loading = newValue;\n                };\n\n                scope.onChangeSources = function (newValue, oldValue) {\n\n                    if (newValue !== oldValue) {\n                        $log.debug('onSearch');\n                        scope.sources = newValue;\n                    }\n                };\n                scope.onChangeSourcesSelected = function (newValue, oldValue) {\n\n                    if (newValue !== oldValue) {\n                        $log.debug('onChangeSourcesSelected');\n                        scope.seletedSources = newValue;\n                    }\n                };\n\n                scope.selectSource = function (source, index) {\n                    rcMediaApi.selectSource(source, index);\n                    scope.seletedSources = rcMediaApi.sourcesSelected;\n                };\n\n                scope.loadMoreSources = function () {\n\n                    rcMediaApi.loadMoreSources().then(\n                        function (response_success) {\n                            scope.loadMore = response_success.length > 0 ? true : false;\n\n                            rcMediaApi.bindResize();\n                        },\n                        function (response_error) {\n                            rcMediaApi.bindResize();\n                        }\n                    );\n                };\n\n                scope.closeAlert = function(index) {\n                    scope.alerts.splice(index, 1);\n                };\n\n                // INIT\n                rcMediaApi.galleryElement = angular.element(elem);\n                rcMediaApi.initMediaGallery( {\n                        loading: scope.loading,\n                        order: scope.order,\n                        multiple: scope.multiple,\n                        loadMore: scope.loadMore\n                    },\n                    scope.search\n                );\n\n\n                scope.rcMediaApi = rcMediaApi;\n\n                scope.$watch('rcMediaApi.sources', scope.onChangeSources);\n                scope.$watch('rcMediaApi.sourcesSelected', scope.onChangeSourcesSelected);\n                scope.$watch('rcMediaApi.gallery.loading', scope.onChangeGalleryLoading);\n\n            }\n        };\n    }]);\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n    module.directive(\"rcmSearch\", [ '$log', function ($log) {\n        return {\n            restrict  : 'EA',\n            require   : '^rcMedia',\n            scope     : {\n                search: '=?ngModel',\n                value : '@?rcmValue'\n            },\n            templateUrl: function (elem, attrs) {\n                return attrs.rcmTemplateUrl || 'rc-media-search.tpl.html';\n            },\n            link: function (scope, elem, attrs, rcMediaApi) {\n\n                scope.search = angular.isDefined(scope.value) ? scope.value : scope.search;\n                scope.value = angular.isDefined(scope.value) ? scope.value : '';\n\n                scope.onSearch = function (newVal, oldVal) {\n\n                    if (newVal !== oldVal) {\n                        $log.debug('onSearch');\n                        rcMediaApi.search = newVal;\n                        rcMediaApi.searchSources();\n                    }\n                };\n\n                // INIT\n                rcMediaApi.searchElement = angular.element(elem);\n                rcMediaApi.initMediaSearch( scope.search );\n\n                scope.rcMediaApi = rcMediaApi;\n\n                scope.$watch('search', scope.onSearch);\n            }\n        };\n    }]);\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n    module.directive(\"rcmTranslate\", [ '$log', 'rcMedia', function ($log, rcMedia) {\n        return {\n            restrict  : 'EA',\n            require: \"^rcMedia\",\n            link: function (scope, elem, attrs, rcMediaApi) {\n\n                var ref = elem.html();\n\n                if (ref.length > 0) {\n                    var text = rcMedia.getLocalizedText(ref);\n                    elem.html(elem.html().replace(ref, text));\n                }\n            }\n        };\n    }]);\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n\n    module.directive(\"rcmUploadControls\", [ '$log', '$parse', '$compile', function ($log, $parse, $compile) {\n        return {\n            restrict  : 'EA',\n            require: \"^rcMedia\",\n            scope     : {\n                file  : '=?ngModel',\n                saveClick: '@?rcmSaveClick',\n                cancelClick: '@?rcmCancelClick'\n            },\n            templateUrl: function (elem, attrs) {\n                return attrs.rcmTemplateUrl || 'rc-media-upload-controls.tpl.html';\n            },\n            link: function (scope, elem, attrs, rcMediaApi) {\n\n                scope.file = angular.isDefined(scope.file) ? scope.file : null;\n\n                scope.uploadFile = function () {\n                    scope.file = rcMediaApi.upload.file;\n\n                    return rcMediaApi.uploadFile().then(\n                        function (response_success) {\n                            $log.debug(response_success);\n                            scope.$parent.$parent.$applyAsync($parse(scope.saveClick));\n                        },\n                        function (response_error) {\n                            $log.debug(response_error);\n                        },\n                        function (evt) {\n                            $log.debug(evt);\n                        }\n                    );\n                };\n\n                scope.cancelUploadFile = function () {\n                    rcMediaApi.cancelUploadFile();\n                };\n\n                scope.resetUploadFile = function (back) {\n                    scope.file = null;\n                    rcMediaApi.resetUploadFile();\n\n                    if (back === true) {\n                        scope.$parent.$parent.$applyAsync($parse(scope.cancelClick));\n                    }\n                };\n\n                // INIT\n                rcMediaApi.uploadControlsElement = angular.element(elem);\n                scope.rcMediaApi = rcMediaApi;\n            }\n        };\n    }]);\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n    module.directive(\"rcmUpload\", [ '$log', function ($log) {\n        return {\n            restrict  : 'EA',\n            require: \"^rcMedia\",\n            scope     : {\n                file      : '=?ngModel',\n                multiple  : '=?rcmMultiple',\n                accept    : '@?rcmAccept',\n                pattern   : '@?rcmPattern',\n                minWidth  : '=?rcmMinWidth',\n                minHeight : '=?rcmMinHeight',\n                crop      : '=?rcmCrop',\n                cropArea  : '=?rcmCropArea',\n                loadIcon : '@?rcmLoadIcon'\n            },\n            templateUrl: function (elem, attrs) {\n                return attrs.rcmTemplateUrl || 'rc-media-upload.tpl.html';\n            },\n            link: function (scope, elem, attrs, rcMediaApi) {\n\n                scope.alerts = [];\n                scope.loading = false;\n                scope.progress = 0;\n                scope.currentState = '';\n\n                scope.file = angular.isDefined(scope.file) ? scope.file : rcMediaApi.resetUploadFile();\n                scope.multiple = angular.isDefined(scope.multiple) ? scope.multiple : false;\n                scope.accept = angular.isDefined(scope.accept) ? scope.accept : 'image/*';\n                scope.pattern = angular.isDefined(scope.pattern) ? scope.pattern : 'image/*';\n                scope.minWidth = angular.isDefined(scope.minWidth) ? scope.minWidth : 300;\n                scope.minHeight = angular.isDefined(scope.minHeight) ? scope.minHeight : 300;\n\n                scope.crop = angular.isDefined(scope.crop) ? scope.crop : true;\n\n                var crop_area_default = {\n                    auto: true,\n                    width: 500,\n                    height: 500,\n                    minWidth: 100,\n                    minHeaight: 100,\n                    cropWidth: 2048,\n                    cropHeight: 2048,\n                    keepAspect: true,\n                    touchRadius: 30,\n                    color: 'rgba(118, 118, 118, 0.8)',\n                    colorDrag: 'rgba(118, 118, 118, 0.8)',\n                    colorBg: 'rgba(200, 200, 200, 0.8)',\n                    colorCropBg: 'rgba(118, 118, 118, 0.8)'\n                };\n\n                scope.cropArea = angular.isObject(scope.cropArea) ? angular.extend(crop_area_default, scope.cropArea)  : crop_area_default;\n\n                // FUNCTIONS\n                scope.onChangeUploadLoading = function (newValue, oldValue) {\n\n                    if (newValue === false) {\n                        scope.loadMore = rcMediaApi.gallery.loadMore;\n                    }\n\n                    scope.loading = newValue;\n                };\n                scope.onChangeUploadResult = function (newValue, oldValue) {\n\n                    if (newValue !== oldValue) {\n                        if (angular.isObject(rcMediaApi.upload.result) && angular.isDefined(rcMediaApi.upload.result.message)) {\n                            scope.alerts.push({type: 'alert', msg: rcMediaApi.upload.result.message});\n                        }\n                        else {\n                            scope.alerts = [];\n                        }\n                    }\n                };\n\n                scope.onChangeUploadFile = function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        $log.debug('onChangeUploadFile');\n                        scope.file = newValue;\n                    }\n                };\n                scope.onChangeUploadMultiple = function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        $log.debug('onChangeUploadMultiple');\n                        scope.multiple = newValue;\n                    }\n                };\n                scope.onChangeUploadCrop = function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        $log.debug('onChangeUploadCrop');\n                        scope.crop = newValue;\n                    }\n                };\n                scope.onChangeUploadCrop = function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        $log.debug('onChangeUploadCrop');\n                        scope.cropArea = newValue;\n                    }\n                };\n                scope.onChangeUploadProgress = function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        $log.debug('onChangeUploadProgress');\n                        scope.progress = newValue;\n                    }\n                };\n                scope.onChangeUploadCurrentState = function (newValue, oldValue) {\n                    $log.debug('onChangeUploadCurrentState');\n\n                    scope.currentState = newValue;\n                };\n\n                scope.uploadSelectFiles = function ($files) {\n                    scope.alerts = [];\n                    rcMediaApi.uploadSelectFiles($files);\n                };\n\n                scope.closeAlert = function(index) {\n                    scope.alerts.splice(index, 1);\n                };\n\n                // INIT\n                rcMediaApi.uploadElement = angular.element(elem);\n                rcMediaApi.initMediaUpload( {\n                    multiple: scope.multiple,\n                    accept  : scope.accept,\n                    pattern : scope.pattern,\n                    minWidth: scope.minWidth,\n                    minHeight: scope.minHeight,\n                    crop    : scope.crop,\n                    cropArea: scope.cropArea,\n                    file    : scope.file\n                } );\n\n                scope.rcMediaApi = rcMediaApi;\n\n                scope.$watch('rcMediaApi.upload.file',      scope.onChangeUploadFile);\n                scope.$watch('rcMediaApi.upload.multiple',  scope.onChangeUploadMultiple);\n                scope.$watch('rcMediaApi.upload.crop',      scope.onChangeUploadCrop);\n                scope.$watch('rcMediaApi.upload.cropArea',  scope.onChangeUploadCropArea);\n                scope.$watch('rcMediaApi.upload.progress',  scope.onChangeUploadProgress);\n                scope.$watch('rcMediaApi.upload.loading',   scope.onChangeUploadLoading);\n                scope.$watch('rcMediaApi.upload.result',    scope.onChangeUploadResult);\n                scope.$watch('rcMediaApi.upload.currentState', scope.onChangeUploadCurrentState);\n            }\n        };\n    }]);\n\n})(angular);\n","(function(angular) {\n    'use strict';\n\n    var module = angular.module('rcMedia');\n\n    module.controller(\"rcMediaCtrl\", [\n        '$scope',\n        '$q',\n        '$window',\n        '$injector',\n        '$filter',\n        '$log',\n        '$timeout',\n        'RCMEDIA_UPLOAD_STATES',\n        'rcMediaService',\n        function ($scope, $q, $window, $injector, $filter, $log, $timeout, RCMEDIA_UPLOAD_STATES, rcMediaService) {\n\n        var rcMediaApi = this;\n\n        this.rcMediaElement = null;\n\n        /**\n         * Init Controller\n         */\n        this.init = function () {\n            $log.debug('rcMedia Init');\n\n            //Set default upload\n            this.upload = {\n                multiple: false,\n                accept: 'image/*',\n                pattern: 'image/*',\n                minWidth: '300',\n                minHeight: '300',\n                crop: true,\n                cropArea: {\n                    auto: true,\n                    color: 'rgba(118, 118, 118, 0.8)',\n                    width: 500,\n                    height: 500,\n                    minWidth: 100,\n                    minHeight: 100\n                },\n                file: {},\n                loading: false,\n                result: null,\n                progress: 0,\n                currentState: '',\n                deferred: null,\n                uploadFile: null\n            };\n\n            this.search = '';\n\n            this.sourceUrl      = angular.isDefined($scope.sourceUrl) ? $scope.sourceUrl : '';\n            this.sourceId       = angular.isDefined($scope.sourceId) ? $scope.sourceId : 'id';\n            this.sourceUrlKey   = angular.isDefined($scope.sourceUrlKey) ? $scope.sourceUrlKey : 'source_url';\n            this.sourceTitle    = angular.isDefined($scope.sourceTitle) ? $scope.sourceTitle : 'title.rendered';\n\n            this.returnModelType  = angular.isDefined($scope.returnModelType) ? $scope.returnModelType : 'string';\n            this.returnModelKey   = angular.isDefined($scope.returnModelKey) ? $scope.returnModelKey : null;\n            this.returnModelPush   = angular.isDefined($scope.returnModelPush) ? $scope.returnModelPush : false;\n\n            this.accept         = angular.isDefined($scope.accept) ? $scope.accept : 'image/*';\n\n            this.sourcesLimitKey = angular.isDefined($scope.sourcesLimitKey) ? $scope.sourcesLimitKey : 'limit';\n            this.sourcesOffsetKey = angular.isDefined($scope.sourcesOffsetKey) ? $scope.sourcesOffsetKey : 'offset';\n            this.sourcesSearchKey = angular.isDefined($scope.sourcesSearchKey) ? $scope.sourcesSearchKey : 'search';\n            this.sourcesQuery = angular.isDefined($scope.sourcesQuery) ? $scope.$eval($scope.sourcesQuery) : {};\n            this.deleteQuery = angular.isDefined($scope.deleteQuery) ? $scope.$eval($scope.deleteQuery) : {};\n\n            this.sources        = angular.isDefined(this.sources) ? this.sources : [];\n            this.sourcesSelected = [];\n\n\n            if (angular.isUndefined(this.sourcesQuery[this.sourcesLimitKey])) {\n                this.sourcesQuery[this.sourcesLimitKey] = 10;\n            }\n\n            if (angular.isUndefined(this.sourcesQuery[this.sourcesOffsetKey])) {\n                this.sourcesQuery[this.sourcesOffsetKey] = 0;\n            }\n\n            if (angular.isUndefined(this.sourcesQuery[this.sourcesSearchKey])) {\n                this.sourcesQuery[this.sourcesSearchKey] = '';\n            }\n\n\n            this.addBindings();\n\n            $scope.onMediaReady({$rcMediaApi: this});\n        };\n\n        /**\n         * Function to execute when init Media Gallery.\n         */\n        this.initMediaGallery = function ( gallery, search ) {\n            $log.debug('initMediaGallery');\n\n            //Set default gallery\n            this.gallery = {\n                result: null,\n                loading: false,\n                loadMore: false,\n                multiple: false,\n                order: 'date'\n            };\n\n            if (angular.isObject(gallery)) {\n                angular.extend(this.gallery, gallery);\n            }\n\n            if (angular.isString(search) && search.length > 0) {\n                this.search = search;\n                this.searchSources();\n            }\n            else {\n                this.getSources(this.sourcesQuery);\n            }\n        };\n\n        /**\n        * Function to execute when init Media Search.\n        */\n        this.initMediaSearch = function ( value ) {\n            $log.debug('initMediaSearch');\n\n            if (angular.isString(value) && value.length > 0) {\n                this.search = value;\n                this.searchSources();\n            }\n        };\n\n\n        /**\n         * Function to execute when init Media Upload.\n         *\n         * @param upload\n         */\n        this.initMediaUpload = function ( upload ) {\n            $log.debug('initMediaUpload');\n\n            if (angular.isObject(upload)) {\n                angular.extend(this.upload, upload);\n            }\n\n\n            this.setUploadState(RCMEDIA_UPLOAD_STATES.SELECT_FILES);\n        };\n\n\n        /**\n         * Function return the source title by expression\n         *\n         * @param source\n         * @param expression\n         * @returns {*}\n         */\n        this.getSourceTitle = function( source ) {\n\n            var source_title_list = this.sourceTitle.split('.');\n            var find_source = source;\n\n            for(var i = 0; i < source_title_list.length - 1; i++) {\n                var elem = source_title_list[i];\n                if( !find_source[elem] ) {\n                    find_source[elem] = {};\n                }\n\n                find_source = find_source[elem];\n            }\n\n            var title = find_source[source_title_list[source_title_list.length - 1]];\n\n            if (title) {\n                return title.replace('_', ' ');\n            }\n\n            return '';\n        };\n\n\n        /**\n         * Set upload new state\n         *\n         * @param newState\n         * @returns {string|*}\n         */\n        this.setUploadState = function (newState) {\n            if (newState && newState !== this.upload.currentState) {\n                $scope.onUploadUpdateState({$state: newState});\n\n                this.upload.currentState = newState;\n            }\n\n            return this.upload.currentState;\n        };\n\n        /**\n         * Upload Select File.\n         *\n         * @param $files\n         */\n        this.uploadSelectFiles = function ($files) {\n\n            if ( $files.length > 0 ) {\n                $log.debug('Upload selectFiles');\n\n                if ( this.upload.multiple === false && this.upload.crop === true ) {\n\n                    if ( angular.isDefined(this.uploadElement) &&\n                        angular.isDefined(this.upload.cropArea.auto) &&\n                        this.upload.cropArea.auto === true\n                    ) {\n\n                        this.upload.cropArea.width = this.uploadElement[0].clientWidth;\n                        this.upload.cropArea.height = this.uploadElement[0].clientHeight;\n                        this.upload.cropArea.minWidth = this.upload.cropArea.width / 10;\n                        this.upload.cropArea.minHeight = this.upload.cropArea.height / 10;\n\n                    }\n\n                    this.setUploadState(RCMEDIA_UPLOAD_STATES.CROP_IMAGE);\n                }\n                else {\n                    this.uploadFile();\n                }\n            }\n        };\n\n        /**\n         * Function to upload files.\n         *\n         * @param file\n         */\n        this.uploadFile = function () {\n            $log.debug('upload');\n\n            this.upload.deferred = $q.defer();\n\n            this.upload.loading = true;\n            this.upload.progress = 0;\n            this.setUploadState(RCMEDIA_UPLOAD_STATES.PROGRESS_FILES);\n\n            try {\n                var Upload = $injector.get('Upload');\n\n                if (angular.isUndefined(this.upload.file.destDataUrl) || !this.upload.file.destDataUrl) {\n                    this.upload.file.destDataUrl = this.upload.file.source.$ngfBlobUrl;\n                }\n                else {\n\n                    this.upload.file.source = Upload.dataUrltoBlob(this.upload.file.destDataUrl, this.upload.file.source.name);\n                }\n\n                this.upload.uploadFile = Upload.upload({\n                    url   : rcMediaService.getRestUrl(),\n                    data: {\n                        file: this.upload.file.source\n                    }\n                });\n\n                this.upload.uploadFile.then(\n                    function (response_success) {\n                        rcMediaApi.resetUploadFile();\n                        rcMediaApi.addSource(response_success.data);\n                        $scope.onUploadFile({$file: rcMediaApi.upload.file});\n\n                        rcMediaApi.setUploadState(RCMEDIA_UPLOAD_STATES.SELECT_FILES);\n\n                        rcMediaApi.upload.result = null;\n                        rcMediaApi.upload.loading = false;\n\n                        rcMediaApi.upload.deferred.resolve(response_success);\n                    },\n                    function (response_error) {\n                        $log.debug('error status: ' + response_error);\n                        rcMediaApi.resetUploadFile();\n                        rcMediaApi.setUploadState(RCMEDIA_UPLOAD_STATES.SELECT_FILES);\n\n                        rcMediaApi.upload.result = response_error.data;\n                        rcMediaApi.upload.loading = false;\n\n                        rcMediaApi.upload.deferred.reject(response_error);\n                    },\n                    function (evt) {\n                        $log.debug('Progress status: ' + evt);\n\n                        var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);\n                        rcMediaApi.upload.progress = progressPercentage;\n\n                        rcMediaApi.upload.deferred.notify(progressPercentage);\n                    }\n                );\n            }\n            catch(err) {\n                $log.error(err);\n\n                rcMediaApi.setUploadState(RCMEDIA_UPLOAD_STATES.SELECT_FILES);\n\n                rcMediaApi.upload.deferred.reject();\n            }\n\n\n            return this.upload.deferred.promise;\n        };\n\n        /**\n         * Cancell upload file\n         */\n        this.cancelUploadFile = function () {\n            this.upload.uploadFile.abort();\n        };\n\n        /**\n         * Function to reset upload file object.\n         *\n         * @returns {{srcFile: null, destDataUrl: string}}\n         */\n        this.resetUploadFile = function () {\n            this.upload.file = {\n                source: null,\n                destDataUrl: ''\n            };\n\n            this.setUploadState(RCMEDIA_UPLOAD_STATES.SELECT_FILES);\n\n            $scope.onResetUploadFile({$file: this.upload.file});\n\n            return this.upload.file;\n        };\n\n        /**\n         * Function to instantiate and check the sources selected.\n         *\n         * @param source\n         */\n        this.selectSource = function (source) {\n            $log.debug('selectSource');\n\n            if ( rcMediaApi.sourcesSelected.indexOf(source) === -1 ) {\n                if (this.gallery.multiple) {\n                    source.activeClass = true;\n                    this.sourcesSelected.push(source);\n                } else {\n                    angular.forEach(rcMediaApi.sources, function (value, key) {\n                        rcMediaApi.sources[key].activeClass = false;\n                    });\n                    source.activeClass = true;\n                    this.sourcesSelected = [];\n                    this.sourcesSelected.push(source);\n                }\n                $scope.onSelectSource({$source: source});\n            } else {\n                var index_source = rcMediaApi.sources.indexOf(source);\n\n                angular.forEach(rcMediaApi.sourcesSelected, function (value, key) {\n                    if (value === source) {\n                        if (index_source !== -1) {\n                            rcMediaApi.sources[index_source].activeClass = false;\n                        }\n                        rcMediaApi.sourcesSelected.splice(key, 1);\n                    }\n                });\n            }\n        };\n\n\n        /**\n         * Function to Deselect all selected source.\n         *\n         * @returns {{srcFile: null, destDataUrl: string}}\n         */\n        this.deselectSources = function () {\n            angular.forEach(rcMediaApi.sources, function (value, key) {\n                rcMediaApi.sources[key].activeClass = false;\n            });\n\n            rcMediaApi.sourcesSelected = [];\n        };\n\n\n        this.getSources = function ( sources_query ) {\n            $log.debug('getGallerySources');\n\n            this.gallery.loading = true;\n\n            var sources_deferred = rcMediaService.get(sources_query, true);\n\n            sources_deferred.then(\n                function (response_success) {\n                    rcMediaApi.sources = angular.copy(response_success);\n\n                    rcMediaApi.gallery.loadMore = rcMediaApi.sources.length > 0 ? true : false;\n                    rcMediaApi.gallery.loading = false;\n                    rcMediaApi.gallery.result = null;\n                },\n                function (response_error) {\n                    rcMediaApi.gallery.loadMore = rcMediaApi.sources.length > 0 ? true : false;\n                    rcMediaApi.gallery.loading = false;\n                    rcMediaApi.gallery.result = response_error.data;\n                }\n            );\n\n            return sources_deferred;\n        };\n\n        /**\n         * Function to instantiate delete the selected values.\n         */\n        this.deleteSources = function ()  {\n            $log.debug('deleteSources');\n\n            var all = [];\n\n            angular.forEach(this.sourcesSelected, function (source, key) {\n\n                all.push(rcMediaService.delete(source[rcMediaApi.sourceId], rcMediaApi.deleteQuery).then(\n                    function (response_success) {\n                        rcMediaApi.removeSource(source);\n                        $scope.onDeleteSources({$source: source} );\n                    },\n                    function (response_error) {\n\n                        //Delete not found remove in sources\n                        if (response_error.status === 404) {\n                            rcMediaApi.removeSource(source);\n                            $scope.onDeleteSources({$source: source} );\n                        }\n                    }\n                ));\n            });\n\n            this.gallery.loading = true;\n\n            var defer_all = $q.all(all);\n\n            defer_all.then(\n                function (response_success) {\n                    rcMediaApi.gallery.loading = false;\n                },\n                function (response_error) {\n                    rcMediaApi.gallery.loading = false;\n                }\n            );\n\n            return defer_all;\n        };\n\n\n        /**\n         * Remove item in sources and in selected sources\n         *\n         * @param source\n         */\n        this.removeSource = function ( source ) {\n\n            //Remove in source\n            var deleted_index = rcMediaApi.sources.map(function(o) { return o[rcMediaApi.sourceId]; }).indexOf(source[rcMediaApi.sourceId]);\n            if (deleted_index !== -1) {\n                rcMediaApi.sources.splice(deleted_index, 1);\n            }\n\n            //Remove in sourcesSelected\n            deleted_index = rcMediaApi.sourcesSelected.map(function(o) { return o[rcMediaApi.sourceId]; }).indexOf(source[rcMediaApi.sourceId]);\n            if (deleted_index !== -1) {\n                rcMediaApi.sourcesSelected.splice(deleted_index, 1);\n            }\n        };\n\n\n        /**\n         * Add item in sources\n         *\n         * @param source\n         */\n        this.addSource = function ( source ) {\n            rcMediaApi.sources.push(angular.copy(source));\n        };\n\n\n        /**\n         * Function to instantiate model with the selected values.\n         */\n        this.saveSources = function () {\n            $log.debug('saveSources');\n\n            if (this.sourcesSelected.length > 0) {\n                var model = [];\n\n                if (this.returnModelPush === false) {\n                    $scope.modelPreview = [];\n                }\n\n                angular.forEach(rcMediaApi.sourcesSelected, function (value) {\n                    if (rcMediaApi.returnModelKey) {\n                        model.push(value[rcMediaApi.returnModelKey]);\n                    }\n                    else {\n                        model.push(value);\n                    }\n\n                    $scope.modelPreview.push(value);\n                });\n\n\n                switch (this.returnModelType) {\n                    case 'string':\n                        if (this.returnModelPush === true) {\n                            var new_model = $scope.model;\n                            if (new_model.length > 0) {\n                                new_model += ',';\n                            }\n                            model = new_model + model.toString();\n                        }\n                        $scope.model = model.toString();\n                        break;\n                    case 'array':\n                        if (this.returnModelPush === true) {\n                            model = $scope.model.concat(model);\n                        }\n                        $scope.model = model;\n                        break;\n                }\n\n                $scope.onSaveSources({$model: $scope.model});\n            }\n        };\n\n        /**\n         * Function to load more sources from DB.\n         */\n        this.loadMoreSources = function () {\n            $log.debug('loadMore');\n\n            this.sourcesQuery[this.sourcesOffsetKey] = this.sources.length;\n\n            this.gallery.loading = true;\n\n            var sources_deferred = rcMediaService.get(this.sourcesQuery);\n\n            sources_deferred.then(\n                function (response_success) {\n                    if (response_success.length > 0) {\n                        angular.forEach(response_success, function (value) {\n                            rcMediaApi.addSource(value);\n                        }, rcMediaApi);\n                    }\n                    else {\n                        rcMediaApi.gallery.loadMore = false;\n                    }\n                    rcMediaApi.gallery.result = null;\n                    rcMediaApi.gallery.loading = false;\n\n                    $scope.onLoadMoreSources();\n                },\n                function (response_error) {\n                    rcMediaApi.gallery.result = response_error.data;\n                    rcMediaApi.gallery.loading = false;\n                }\n            );\n\n            return sources_deferred;\n        };\n\n        this.searchSources = function () {\n            $log.debug('searchSources');\n\n            this.sourcesQuery[this.sourcesSearchKey] = this.search;\n            this.sourcesQuery[this.sourcesOffsetKey] = 0;\n\n            this.gallery.loading = true;\n\n            var sources_deferred = rcMediaService.get(this.sourcesQuery, true);\n\n            sources_deferred.then(\n                function (response_success) {\n                    if (response_success.length > 0) {\n                        rcMediaApi.sources = angular.copy(response_success);\n                    }\n                    else {\n                        rcMediaApi.sources = [];\n                    }\n\n                    rcMediaApi.gallery.loadMore = rcMediaApi.sources.length > 0 ? true : false;\n                    rcMediaApi.gallery.result = null;\n                    rcMediaApi.gallery.loading = false;\n\n                    $scope.onSearchSources({$search: rcMediaApi.search});\n                },\n                function (response_error) {\n                    rcMediaApi.sources = [];\n                    rcMediaApi.gallery.loadMore = false;\n                    rcMediaApi.gallery.result = response_error.data;\n                    rcMediaApi.gallery.loading = false;\n                }\n            );\n\n            return sources_deferred;\n        };\n\n        /**\n         *  Force resize event for angular tiny scrollbar after loading hide\n         */\n        this.bindResize = function() {\n            $timeout(function() {\n                $window.dispatchEvent(new Event(\"resize\"));\n            }, 50);\n        };\n\n        this.addBindings = function () {\n            $log.debug('addBindings');\n\n        };\n\n\n        //Init\n        this.init();\n    }]);\n\n})(angular);\n","(function(angular){\n    'use strict';\n\n    // Load module rc-media\n    var module = angular.module('rcMedia');\n\n    //Enable cancellable resource\n    module.config(function($resourceProvider) {\n        $resourceProvider.defaults.cancellable = true;\n    });\n\n    module.provider('rcMedia', [ function rcMediaProvider() {\n\n        this.rest = {\n            url: '',\n            path: '/wp-json/wp/v2/media'\n        };\n\n        this.locale = null;\n\n        // default localized text. cannot be modified.\n        this.defaultText = {\n            'en-us': {\n                TITLE_GALLERY       : 'Gallery',\n                TITLE_UPLOAD        : 'Upload files',\n                TITLE_DRAG_FILE     : 'Drag files to upload',\n                SUB_TITLE_DRAG_FILE : 'or',\n                BTN_CANCEL          : 'Cancel',\n                BTN_SAVE            : 'Save',\n                BTN_DELETE_FILE     : 'Delete file',\n                BTN_DELETE_FILES    : 'Delete files',\n                BTN_DESELECT_ALL    : 'Deselect all',\n                BTN_SELECT_FILE     : 'Select file',\n                BTN_SELECT_FILES    : 'Select files',\n                BTN_SHOW_MORE       : 'Show More',\n                BTN_BACK_GALLERY    : 'Back to gallery',\n                BTN_UPLOAD_FILE     : 'Upload file',\n                BTN_UPLOAD_FILES    : 'Upload files',\n                BTN_BROWSE_FILE     : 'Browse a file'\n            },\n            'fr-FR': {\n                TITLE_GALLERY       : 'Gallerie',\n                TITLE_UPLOAD        : 'Télécharger un fichier',\n                TITLE_DRAG_FILE     : 'Glisser le fichier ici',\n                SUB_TITLE_DRAG_FILE : 'ou',\n                BTN_CANCEL          : 'Annuler',\n                BTN_SAVE            : 'Sauver',\n                BTN_DELETE_FILE     : 'Supprimer le fichier',\n                BTN_DELETE_FILES    : 'Supprimer les fichiers',\n                BTN_DESELECT_ALL    : 'Déselectioner tous',\n                BTN_SELECT_FILE     : 'Selectioner le fichier',\n                BTN_SELECT_FILES    : 'Selectioner les fichiers',\n                BTN_SHOW_MORE       : 'Voir plus',\n                BTN_BACK_GALLERY    : 'Revenir à la gallerie',\n                BTN_UPLOAD_FILE     : 'Télécharger le fichier',\n                BTN_UPLOAD_FILES    : 'Télécharger les fichiers',\n                BTN_BROWSE_FILE     : 'Choisir un fichier'\n            }\n        };\n\n        // localized text which actually being used.\n        this.interfaceText = angular.copy(this.defaultText);\n\n\n\n        this.$get = [ '$http', '$locale', function( $http, $locale ) {\n            var rest = this.rest;\n            var localizedText;\n\n            $http.defaults.useXDomain = true;\n\n            // Disable IE ajax request caching\n            $http.defaults.headers.common['If-Modified-Since']  = '0';\n            //Disable caching\n            $http.defaults.headers.common['cache-control']      = 'private, max-age=0, no-cache';\n\n            //Translation\n            if(this.locale) {\n                localizedText = this.interfaceText[this.locale];\n            } else {\n                localizedText = this.interfaceText[$locale.id];\n            }\n\n            if(!localizedText) {\n                localizedText = this.defaultText['en-us'];\n            }\n\n            return {\n                getRest: function() {\n                    return rest;\n                },\n                getLocalizedText: function ( item ) {\n\n                    if (item) {\n                        var text = localizedText[item];\n\n                        return (text) ? text : '';\n                    }\n\n                    return localizedText;\n                }\n            };\n        }];\n\n        /**\n         * Merge with default localized text.\n         * @param localeId a string formatted as languageId-countryId\n         * @param obj localized text object.\n         */\n        this.setLocalizedText = function(localeId, obj) {\n            if(!localeId) {\n                throw new Error('localeId must be a string formatted as languageId-countryId');\n            }\n            if(!this.interfaceText[localeId]) {\n                this.interfaceText[localeId] = {};\n            }\n            this.interfaceText[localeId] = angular.extend(this.interfaceText[localeId], obj);\n        };\n\n        /**\n         * Force to use a special locale id. if localeId is null. reset to user-agent locale.\n         * @param localeId a string formatted as languageId-countryId\n         */\n        this.useLocale = function(localeId) {\n            this.locale = localeId;\n        };\n\n        this.setRest = function(rest) {\n            this.rest = rest;\n        };\n\n    }]);\n\n\n    //Media Resource\n    module.factory( 'rcMediaResource', [ '$resource', 'rcMedia', function ( $resource, rcMedia ) {\n\n        var rest_url = rcMedia.getRest().url + rcMedia.getRest().path;\n\n        var resource = {\n            Media: $resource(rest_url + '/:mediaId',\n                {mediaId: '@media_id'},\n                {get: {\n                    method: 'GET',\n                    isArray: false,\n                    cache: false\n                }},\n                {query: {\n                    method: 'GET',\n                    params:{},\n                    isArray: true,\n                    cache: false,\n                    cancellable: true\n                }}\n            )\n        };\n\n        return resource;\n\n    }]);\n\n    //Media Service Abstraction\n    module.factory('rcMediaService', ['$log', '$q', 'rcMedia', 'rcMediaResource', function ( $log, $q, rcMedia, rcMediaResource ) {\n\n        var service = {\n\n            getRestUrl: function () {\n                return rcMedia.getRest().url + rcMedia.getRest().path;\n            },\n\n            get: function( sources_query, cancel ){\n\n                //Cancel last request if param true\n                if (cancel === true && this.request !== undefined && angular.isFunction(this.request.$cancelRequest)) {\n\n                    this.request.$cancelRequest();\n                }\n\n                if ( angular.isNumber(sources_query) ) {\n                    sources_query = {mediaId: sources_query};\n\n                    this.request = rcMediaResource.Media.get( sources_query );\n                }\n                else {\n                    if ( !angular.isObject(sources_query) ) {\n                        sources_query = {};\n                    }\n\n                    this.request = rcMediaResource.Media.query( sources_query );\n                }\n\n                return this.request.$promise;\n            },\n\n            delete: function ( source_id, delete_query ) {\n\n                if (angular.isUndefined(delete_query)) {\n                    delete_query = {};\n                }\n\n                angular.extend(delete_query, { mediaId: source_id } );\n\n                return rcMediaResource.Media.delete( delete_query ).$promise;\n            }\n\n        };\n\n        return service;\n    }]);\n\n})(angular);\n","angular.module('rcMedia').run(['$templateCache', function($templateCache) {$templateCache.put('rc-media-dialog-zf.tpl.html','<div class=\"rc-media\" rc-media\\n     rcm-source-url=\"{{rcDialogApi.data.sourceUrl}}\"\\n     rcm-source-url-key=\"{{rcDialogApi.data.sourceUrlKey}}\"\\n     rcm-source-id=\"{{rcDialogApi.data.sourceId}}\"\\n     rcm-source-title=\"{{rcDialogApi.data.sourceTitle}}\"\\n     data-ng-model=\"rcDialogApi.data.sources\"\\n     data-ng-model-preview=\"rcDialogApi.data.sourcesPreview\"\\n     rcm-return-model-type=\"{{rcDialogApi.data.returnModelType}}\"\\n     rcm-return-model-key=\"{{rcDialogApi.data.returnModelKey}}\"\\n     rcm-return-model-push=\"rcDialogApi.data.returnModelPush\"\\n     rcm-delete-query=\"{{rcDialogApi.data.deleteQuery}}\"\\n     rcm-sources-query=\"{{rcDialogApi.data.sourcesQuery}}\"\\n     rcm-sources-offset-key=\"{{rcDialogApi.data.sourcesOffsetKey}}\"\\n     rcm-sources-limit-key=\"{{rcDialogApi.data.sourcesLimitKey}}\"\\n     rcm-sources-search-key=\"{{rcDialogApi.data.sourcesSearchKey}}\"\\n>\\n<div class=\"dialog-header\">\\n    <div class=\"gallery-view\" data-ng-show=\"!selectedView\">\\n        <h3 class=\"float-left dialog-title\"><rcm-translate>TITLE_GALLERY</rcm-translate></h3>\\n        <button class=\"button secondary hollow float-right dialog-close\" type=\"button\" data-ng-click=\"rcDialogApi.closeDialog()\" aria-label=\"Close reveal\" >\\n            <span aria-hidden=\"true\">&times;</span>\\n        </button>\\n        <button class=\"button primary hollow float-right upload\" type=\"button\" data-ng-show=\"!selectedView\" data-ng-click=\"selectedView=\\'fileUpload\\'\" >\\n            <svg width=\"25\" height=\"25\" version=\"1.1\" id=\"rcm_upload_svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\\n                   x=\"0px\" y=\"0px\" viewBox=\"0 0 23 20.5\" style=\"enable-background:new 0 0 23 20.5;\" xml:space=\"preserve\"\\n              >\\n                <g id=\"rcm_upload_svg_arrow\">\\n                  <line id=\"rcm_upload_svg_line\" class=\"st0\" x1=\"11.5\" y1=\"20.5\" x2=\"11.5\" y2=\"7.5\"/>\\n                  <polyline id=\"rcm_upload_svg_point\" class=\"st1\" points=\"8.5,10.5 11.5,7.5 14.5,10.5 \\t\"/>\\n                </g>\\n                <path\\n                  id=\"rcm_upload_svg_cloud\"\\n                  class=\"st1\"\\n                  d=\"M15.5,15.5h3c2.2,0,4-1.8,4-4c0-2.2-1.8-4-4-4c-0.3-3.9-3.5-7-7.5-7c-4,0-7.3,3.2-7.5,7.1c-1.7,0.4-3,2-3,3.9c0,2.2,1.8,4,4,4h3\"\\n                />\\n            </svg>\\n            <rcm-translate>BTN_UPLOAD_FILE</rcm-translate>\\n        </button>\\n    </div>\\n\\n    <div class=\"upload-view\" data-ng-show=\"selectedView==\\'fileUpload\\'\">\\n        <h3 class=\"float-left dialog-title\" ><rcm-translate>TITLE_UPLOAD</rcm-translate></h3>\\n        <button class=\"button secondary hollow float-right dialog-close\" type=\"button\" data-ng-click=\"rcDialogApi.closeDialog()\" aria-label=\"Close reveal\" >\\n            <span aria-hidden=\"true\">&times;</span>\\n        </button>\\n    </div>\\n</div>\\n<div class=\"dialog-body\">\\n\\n    <!-- Directive rc-media-upload -->\\n    <div class=\"upload-view\" data-ng-if=\"selectedView==\\'fileUpload\\'\"\\n         rcm-upload\\n         rcm-template-url=\"rc-media-upload-zf.tpl.html\"\\n         rcm-multiple=\"rcDialogApi.data.upload.multiple\"\\n         rcm-accept=\"{{rcDialogApi.data.upload.accept}}\"\\n         rcm-crop=\"rcDialogApi.data.upload.crop\"\\n         rcm-crop-area=\"rcDialogApi.data.upload.cropArea\"\\n         rcm-load-icon=\"{{rcDialogApi.data.upload.loadIcon}}\"\\n    ></div>\\n\\n    <div class=\"gallery-view\" data-ng-show=\"!selectedView\">\\n        <!-- Directive rc-media-gallery -->\\n        <div rcm-gallery\\n             rcm-template-url=\"rc-media-gallery-zf.tpl.html\"\\n             rcm-order=\"{{rcDialogApi.data.gallery.order}}\"\\n             rcm-multiple=\"rcDialogApi.data.gallery.multiple\"\\n             rcm-selected-sources=\"rcDialogApi.data.gallery.selectedSources\"\\n             rcm-search-value=\"{{rcDialogApi.data.gallery.searchValue}}\"\\n             rcm-load-icon=\"{{rcDialogApi.data.gallery.loadIcon}}\"\\n        ></div>\\n    </div>\\n</div>\\n<div class=\"dialog-footer\" data-ng-show=\"selectedView || rcDialogApi.data.gallery.selectedSources.length\">\\n    <div class=\"upload-view\" data-ng-if=\"selectedView==\\'fileUpload\\'\" rcm-upload-controls\\n         rcm-template-url=\"rc-media-upload-controls-zf.tpl.html\"\\n         data-ng-model=\"rcDialogApi.data.uploadFile\"\\n         rcm-save-click=\"selectedView=false\"\\n         rcm-cancel-click=\"selectedView=false\"\\n    ></div>\\n\\n    <div class=\"gallery-view\" data-ng-if=\"!selectedView\" rcm-gallery-controls\\n         rcm-template-url=\"rc-media-gallery-controls-zf.tpl.html\"\\n         rcm-save-click=\"rcDialogApi.confirmDialog()\"\\n    ></div>\\n</div>\\n</div>');\n$templateCache.put('rc-media-gallery-controls-zf.tpl.html','<button class=\"button alert hollow float-left delete-file\" data-ng-click=\"deleteSources()\" data-ng-disabled=\"loading\"><rcm-translate>BTN_DELETE_FILE</rcm-translate></button>\\n<button class=\"button secondary hollow float-left deselect-all\" data-ng-click=\"deselectSources()\" data-ng-disabled=\"loading\"><rcm-translate>BTN_DESELECT_ALL</rcm-translate></button>\\n<button class=\"button primary float-right select-file\" data-ng-click=\"saveSources()\" data-ng-disabled=\"loading\"><rcm-translate>BTN_SELECT_FILE</rcm-translate></button>');\n$templateCache.put('rc-media-gallery-zf.tpl.html','<div class=\"rcm-gallery\" >\\n\\n    <alert class=\"message\" data-ng-repeat=\"alert in alerts\" type=\"alert.type\" close=\"closeAlert($index)\">{{alert.msg}}</alert>\\n\\n    <div data-ng-hide=\"!loading\" class=\"loading-overlay\">\\n        <webicon  class=\"loading-icon\" icon=\"{{loadIcon}}\"></webicon>\\n    </div>\\n\\n    <div class=\"gallery-overlay\" scrollbar=\"{autoUpdate: true}\">\\n\\n        <div data-ng-repeat=\"source in sources | orderBy:order:true\"\\n             class=\"thumbnail-block\"\\n             data-ng-class=\"{\\'selected\\': source.activeClass}\"\\n             data-ng-click=\"selectSource(source)\">\\n            <div class=\"thumbnail\"\\n                 data-ng-style=\"{\\'background-image\\':\\'url({{rcMediaApi.sourceUrl + source[rcMediaApi.sourceUrlKey]}})\\', \\'background-repeat\\': \\'no-repeat\\', \\'background-position\\': \\'center center\\', \\'background-size\\': \\'contain\\'}\"\\n                 tooltip-placement=\"bottom\"\\n                 tooltip-html-unsafe=\"{{rcMediaApi.getSourceTitle(source)}}\"\\n            ></div>\\n        </div>\\n\\n        <button type=\"button\" class=\"button secondary float-center load-more\" data-ng-show=\"loadMore\" data-ng-click=\"loadMoreSources()\" data-ng-disabled=\"loading\">\\n            <i class=\"fa fa-plus\"></i>\\n            <rcm-translate>BTN_SHOW_MORE</rcm-translate>\\n        </button>\\n\\n    </div>\\n</div>');\n$templateCache.put('rc-media-upload-controls-zf.tpl.html','<div data-ng-show=\"rcMediaApi.upload.currentState==\\'selectFiles\\'\">\\n    <button class=\"button secondary hollow float-left\" data-ng-click=\"resetUploadFile(true)\"><rcm-translate>BTN_BACK_GALLERY</rcm-translate></button>\\n</div>\\n\\n<div data-ng-show=\"rcMediaApi.upload.currentState==\\'cropImage\\'\">\\n    <button class=\"button primary float-right\" data-ng-click=\"uploadFile()\"><rcm-translate>BTN_SAVE</rcm-translate></button>\\n    <button class=\"button hollow secondary float-right\" data-ng-click=\"resetUploadFile()\"><rcm-translate>BTN_CANCEL</rcm-translate></button>\\n</div>\\n\\n<div data-ng-show=\"rcMediaApi.upload.currentState==\\'progressFiles\\'\">\\n    <button class=\"button secondary float-right\" data-ng-click=\"cancelUploadFile()\"><rcm-translate>BTN_CANCEL</rcm-translate></button>\\n</div>\\n');\n$templateCache.put('rc-media-upload-zf.tpl.html','<div class=\"rcm-upload\">\\n\\n  <alert class=\"message\" data-ng-repeat=\"alert in alerts\" type=\"alert.type\" close=\"closeAlert($index)\">{{alert.msg}}</alert>\\n\\n  <div data-ng-show=\"currentState==\\'selectFiles\\'\" class=\"rcm-dropzone\"\\n       ngf-drop=\"uploadSelectFiles($files)\"\\n       data-ng-model=\"file.source\"\\n       ngf-drag-over-class=\"dragover\"\\n       ngf-multiple=\"multiple\"\\n       ngf-pattern=\"{{pattern}}\"\\n       ngf-accept=\"{{accept}}\"\\n       ngf-min-width=\"minWidth\"\\n       ngf-min-height=\"minHeight\"\\n  >\\n\\n    <div class=\"select-file\" >\\n      <svg width=\"150\" height=\"150\" version=\"1.1\" id=\"rcm_upload_svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\\n           x=\"0px\" y=\"0px\" viewBox=\"0 0 23 20.5\" style=\"enable-background:new 0 0 23 20.5;\" xml:space=\"preserve\"\\n      >\\n        <g id=\"rcm_upload_svg_arrow\">\\n\\t      <line id=\"rcm_upload_svg_line\" class=\"st0\" x1=\"11.5\" y1=\"20.5\" x2=\"11.5\" y2=\"7.5\"/>\\n\\t      <polyline id=\"rcm_upload_svg_point\" class=\"st1\" points=\"8.5,10.5 11.5,7.5 14.5,10.5 \\t\"/>\\n        </g>\\n        <path\\n          id=\"rcm_upload_svg_cloud\"\\n          class=\"st1\"\\n          d=\"M15.5,15.5h3c2.2,0,4-1.8,4-4c0-2.2-1.8-4-4-4c-0.3-3.9-3.5-7-7.5-7c-4,0-7.3,3.2-7.5,7.1c-1.7,0.4-3,2-3,3.9c0,2.2,1.8,4,4,4h3\"\\n        />\\n      </svg>\\n\\n      <h3><rcm-translate>TITLE_DRAG_FILE</rcm-translate></h3>\\n      <p class=\"lead\"><rcm-translate>SUB_TITLE_DRAG_FILE</rcm-translate></p>\\n\\n      <button ngf-select=\"uploadSelectFiles($files)\"\\n              data-ng-model=\"file.source\"\\n              ngf-multiple=\"multiple\"\\n              ngf-accept=\"{{accept}}\"\\n              ngf-pattern=\"{{pattern}}\"\\n              ngf-min-width=\"minWidth\"\\n              ngf-min-height=\"minHeight\"\\n              type=\"button\"\\n              class=\"button primary large\"\\n      >\\n        <rcm-translate>BTN_BROWSE_FILE</rcm-translate>\\n      </button>\\n    </div>\\n  </div>\\n\\n  <div class=\"crop-area\" data-ng-if=\"currentState==\\'cropImage\\'\">\\n    <div>\\n      <canvas\\n              height=\"{{cropArea.height}}px\"\\n              width=\"{{cropArea.width}}px\"\\n              min-width=\"cropArea.minWidth\"\\n              min-height=\"cropArea.minHeight\"\\n              id=\"canvas\"\\n              img-cropper\\n              img-src=\"{imageData: (file.source | ngfDataUrl), fileType: file.source.type}\"\\n              img-dst=\"file.destDataUrl\"\\n              crop-width=\"cropArea.cropWidth\"\\n              crop-height=\"cropArea.cropHeight\"\\n              keep-aspect=\"cropArea.keepAspect\"\\n              touch-radius=\"cropArea.touchRadius\"\\n              color=\"{{cropArea.color}}\"\\n              color-drag=\"{{cropArea.colorDrag}}\"\\n              color-bg=\"{{cropArea.colorBg}}\"\\n              color-crop-bg=\"{{cropArea.colorCropBg}}\"\\n      >\\n      </canvas>\\n    </div>\\n  </div>\\n\\n  <div data-ng-show=\"currentState==\\'progressFiles\\'\" class=\"preview-file\" >\\n\\n    <div class=\"loading-overlay\">\\n      <webicon  class=\"loading-icon\" icon=\"{{loadIcon}}\"></webicon>\\n    </div>\\n\\n    <img class=\"float-center\" width=\"200\" height=\"200\" data-ng-src=\"{{file.destDataUrl}}\" alt=\"\">\\n  </div>\\n</div>');\n$templateCache.put('rc-media-search-zf.tpl.html','<div class=\"rcm-search input-group\">\\n  <span class=\"input-group-addon\"><i class=\"glyphicon glyphicon-search\"></i></span>\\n  <input type=\"text\" class=\"form-control\" data-ng-model=\"search\" placeholder=\"Search ...\">\\n</div>');}]);"],"sourceRoot":"dist"}